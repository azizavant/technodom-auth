/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/auth/resetPassword/': {
    post: operations['api_auth_resetPassword_create']
  }
  '/api/auth/token/': {
    /** Return JWT tokens (access and refresh) for specific user based on username and password. */
    post: operations['api_auth_token_create']
  }
  '/api/auth/token/logout/': {
    /**
     * Takes a token and blacklists it. Must be used with the
     * `rest_framework_simplejwt.token_blacklist` app installed.
     */
    post: operations['api_auth_token_logout_create']
  }
  '/api/auth/token/refresh/': {
    /** Renew tokens (access and refresh) with new expire time based on specific user's access token. */
    post: operations['api_auth_token_refresh_create']
  }
  '/api/auth/verify/': {
    /** Верификация кода отправленный на почту или в мобильный телефон */
    post: operations['api_auth_verify_create']
  }
  '/v1/additionalInfo/Services/': {
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    get: operations['additionalInfo_Services_list']
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    post: operations['additionalInfo_Services_create']
  }
  '/v1/additionalInfo/Services/{id}/': {
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    get: operations['additionalInfo_Services_retrieve']
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    put: operations['additionalInfo_Services_update']
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    delete: operations['additionalInfo_Services_destroy']
    /**
     * Здесь создаётся услуга к заголовкам
     * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?title_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись title: {id}
     * service: {string}
     */
    patch: operations['additionalInfo_Services_partial_update']
  }
  '/v1/additionalInfo/title/': {
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    get: operations['additionalInfo_title_list']
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    post: operations['additionalInfo_title_create']
  }
  '/v1/additionalInfo/title/{id}/': {
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    get: operations['additionalInfo_title_retrieve']
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    put: operations['additionalInfo_title_update']
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    delete: operations['additionalInfo_title_destroy']
    /**
     * Здесь есть возможность создания своих названий туров и
     * возвращаются те которые не прикреплены к конкретному турID
     */
    patch: operations['additionalInfo_title_partial_update']
  }
  '/v1/additionalInfo/tourTitle/': {
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    get: operations['additionalInfo_tourTitle_list']
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    post: operations['additionalInfo_tourTitle_create']
  }
  '/v1/additionalInfo/tourTitle/{id}/': {
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    get: operations['additionalInfo_tourTitle_retrieve']
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    put: operations['additionalInfo_tourTitle_update']
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    delete: operations['additionalInfo_tourTitle_destroy']
    /**
     * Здесь создаётся заголовки к турам
     * GET additionalInfo/ для получения всех Заголовках во всех турах,
     * чтобы получить заголовки конкретного тура добавьте к параметрам
     * ?tour_id={id}
     * POST additionalInfo/
     * для добавления к конкретному туру заголовок внутри даты добавьте
     * запись tour: {id}
     */
    patch: operations['additionalInfo_tourTitle_partial_update']
  }
  '/v1/address/cities/': {
    get: operations['address_cities_list']
  }
  '/v1/address/cities/search/': {
    /**
     * Поиск городов по значениям.
     * TODO: в дальнейшем будет по регионам и по странам.
     */
    get: operations['address_cities_search_list']
  }
  '/v1/address/country/': {
    get: operations['address_country_list']
  }
  '/v1/address/first-page/': {
    get: operations['address_first_page_list']
  }
  '/v1/address/regions/': {
    get: operations['address_regions_list']
  }
  '/v1/applications/': {
    post: operations['applications_create']
  }
  '/v1/categories/': {
    get: operations['categories_retrieve']
  }
  '/v1/clients/': {
    get: operations['clients_list']
    post: operations['clients_create']
  }
  '/v1/clients/{id}/': {
    get: operations['clients_retrieve']
    put: operations['clients_update']
    delete: operations['clients_destroy']
    patch: operations['clients_partial_update']
  }
  '/v1/clients/me/': {
    get: operations['clients_me_retrieve']
  }
  '/v1/clients/payHistory/': {
    /** Вывод всех приобретенных туров пользователя */
    get: operations['clients_payHistory_list']
  }
  '/v1/clients/payHistoryDetail/': {
    /** Вывод всех приобретенных туров пользователя */
    get: operations['clients_payHistoryDetail_retrieve']
  }
  '/v1/comments/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['comments_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    post: operations['comments_create']
  }
  '/v1/comments/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['comments_retrieve']
  }
  '/v1/confirmationCode/{id}/': {
    post: operations['confirmationCode_create']
  }
  '/v1/confirmationCode/validate/{id}/': {
    post: operations['confirmationCode_validate_create']
  }
  '/v1/crm/': {
    /** Резервирующим может быть и юрлицо и физлицо. */
    get: operations['crm_list']
    /** Резервирующим может быть и юрлицо и физлицо. */
    post: operations['crm_create']
  }
  '/v1/crm/{id}/': {
    /** Резервирующим может быть и юрлицо и физлицо. */
    get: operations['crm_retrieve']
    /** Резервирующим может быть и юрлицо и физлицо. */
    put: operations['crm_update']
    /** Резервирующим может быть и юрлицо и физлицо. */
    delete: operations['crm_destroy']
    /** Резервирующим может быть и юрлицо и физлицо. */
    patch: operations['crm_partial_update']
  }
  '/v1/crm/check/': {
    /** Резервирующим может быть и юрлицо и физлицо. */
    get: operations['crm_check_retrieve']
  }
  '/v1/email/': {
    /** Вывод всех email пользователя по user_id */
    get: operations['email_list']
    post: operations['email_create']
  }
  '/v1/email/{id}/': {
    get: operations['email_retrieve']
    put: operations['email_update']
    delete: operations['email_destroy']
    patch: operations['email_partial_update']
  }
  '/v1/entry-days/{tour_id}/': {
    /** <b>Дни недели для указания заезда в заведение</b> */
    get: operations['entry_days_retrieve']
    /** <b>Дни недели для указания заезда в заведение</b> */
    put: operations['entry_days_update']
    /** <b>Дни недели для указания заезда в заведение</b> */
    patch: operations['entry_days_partial_update']
  }
  '/v1/extra-holiday/': {
    post: operations['extra_holiday_create']
  }
  '/v1/extra-holiday/{id}/': {
    put: operations['extra_holiday_update']
    delete: operations['extra_holiday_destroy']
    patch: operations['extra_holiday_partial_update']
  }
  '/v1/guide-program-places/': {
    get: operations['guide_program_places_list']
    post: operations['guide_program_places_create']
  }
  '/v1/guide-program-places/{id}/': {
    get: operations['guide_program_places_retrieve']
    put: operations['guide_program_places_update']
    delete: operations['guide_program_places_destroy']
    patch: operations['guide_program_places_partial_update']
  }
  '/v1/guide-program-schedules/': {
    get: operations['guide_program_schedules_list']
    post: operations['guide_program_schedules_create']
  }
  '/v1/guide-program-schedules/{id}/': {
    get: operations['guide_program_schedules_retrieve']
    put: operations['guide_program_schedules_update']
    delete: operations['guide_program_schedules_destroy']
    patch: operations['guide_program_schedules_partial_update']
  }
  '/v1/guide-programs/': {
    get: operations['guide_programs_list']
    post: operations['guide_programs_create']
  }
  '/v1/guide-programs/{id}/': {
    get: operations['guide_programs_retrieve']
    put: operations['guide_programs_update']
    delete: operations['guide_programs_destroy']
    patch: operations['guide_programs_partial_update']
  }
  '/v1/guide-reviews/': {
    get: operations['guide_reviews_list']
    post: operations['guide_reviews_create']
  }
  '/v1/guide-reviews/{id}/': {
    get: operations['guide_reviews_retrieve']
  }
  '/v1/guide-services/': {
    get: operations['guide_services_list']
    post: operations['guide_services_create']
  }
  '/v1/guide-services/{id}/': {
    get: operations['guide_services_retrieve']
    put: operations['guide_services_update']
    delete: operations['guide_services_destroy']
    patch: operations['guide_services_partial_update']
  }
  '/v1/guide-shots/': {
    get: operations['guide_shots_list']
    post: operations['guide_shots_create']
  }
  '/v1/guide-shots/{id}/': {
    get: operations['guide_shots_retrieve']
    put: operations['guide_shots_update']
    delete: operations['guide_shots_destroy']
    patch: operations['guide_shots_partial_update']
  }
  '/v1/guides/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['guides_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    post: operations['guides_create']
  }
  '/v1/guides/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['guides_retrieve']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    put: operations['guides_update']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    delete: operations['guides_destroy']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    patch: operations['guides_partial_update']
  }
  '/v1/guides/partner/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['guides_partner_retrieve']
  }
  '/v1/guides/slug/{slug}/': {
    get: operations['guides_slug_retrieve']
  }
  '/v1/holidays/{tour_id}/': {
    /**
     * <b>Ценообразование по дню недели.
     * Там, где указан день, цена будет выше</b>
     */
    get: operations['holidays_retrieve']
    /**
     * <b>Ценообразование по дню недели.
     * Там, где указан день, цена будет выше</b>
     */
    put: operations['holidays_update']
    /**
     * <b>Ценообразование по дню недели.
     * Там, где указан день, цена будет выше</b>
     */
    patch: operations['holidays_partial_update']
  }
  '/v1/location/': {
    /** Локации тура */
    get: operations['location_list']
    /** Локации тура */
    post: operations['location_create']
  }
  '/v1/location/{id}/': {
    /** Локации тура */
    get: operations['location_retrieve']
    /** Локации тура */
    put: operations['location_update']
    /** Локации тура */
    delete: operations['location_destroy']
    /** Локации тура */
    patch: operations['location_partial_update']
  }
  '/v1/location/tour/': {
    /** Локации тура */
    get: operations['location_tour_retrieve']
  }
  '/v1/manyGuidePrograms/': {
    get: operations['manyGuidePrograms_list']
  }
  '/v1/manyGuides/': {
    get: operations['manyGuides_list']
  }
  '/v1/manyTours/': {
    get: operations['manyTours_list']
  }
  '/v1/number-cabinets/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    get: operations['number_cabinets_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    post: operations['number_cabinets_create']
  }
  '/v1/number-cabinets/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    get: operations['number_cabinets_retrieve']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    put: operations['number_cabinets_update']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    delete: operations['number_cabinets_destroy']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    patch: operations['number_cabinets_partial_update']
  }
  '/v1/number-shots/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    get: operations['number_shots_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    post: operations['number_shots_create']
  }
  '/v1/number-shots/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    get: operations['number_shots_retrieve']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    put: operations['number_shots_update']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    delete: operations['number_shots_destroy']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    patch: operations['number_shots_partial_update']
  }
  '/v1/number-shots/delete/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    delete: operations['number_shots_delete_destroy']
  }
  '/v1/numbers/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['numbers_list']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    post: operations['numbers_create']
  }
  '/v1/numbers/{id}/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['numbers_retrieve']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    put: operations['numbers_update']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    delete: operations['numbers_destroy']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    patch: operations['numbers_partial_update']
  }
  '/v1/numbers/comforts/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['numbers_comforts_retrieve']
  }
  '/v1/numbers/free_numbers/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['numbers_free_numbers_retrieve']
  }
  '/v1/org_type/': {
    get: operations['org_type_list']
  }
  '/v1/org_type/{slug}/': {
    get: operations['org_type_retrieve']
  }
  '/v1/packages/': {
    /** Тур checkup пакеты */
    get: operations['packages_list']
    /** Тур checkup пакеты */
    post: operations['packages_create']
  }
  '/v1/packages/{id}/': {
    /** Тур checkup пакеты */
    get: operations['packages_retrieve']
    /** Тур checkup пакеты */
    put: operations['packages_update']
    /** Тур checkup пакеты */
    delete: operations['packages_destroy']
    /** Тур checkup пакеты */
    patch: operations['packages_partial_update']
  }
  '/v1/paid-services/': {
    /** Дополнительные платные услуги */
    get: operations['paid_services_list']
    /** Дополнительные платные услуги */
    post: operations['paid_services_create']
  }
  '/v1/paid-services/{id}/': {
    /** Дополнительные платные услуги */
    get: operations['paid_services_retrieve']
    /** Дополнительные платные услуги */
    put: operations['paid_services_update']
    /** Дополнительные платные услуги */
    delete: operations['paid_services_destroy']
    /** Дополнительные платные услуги */
    patch: operations['paid_services_partial_update']
  }
  '/v1/partners/': {
    get: operations['partners_list']
    post: operations['partners_create']
  }
  '/v1/partners/{id}/': {
    get: operations['partners_retrieve']
    put: operations['partners_update']
    delete: operations['partners_destroy']
    patch: operations['partners_partial_update']
  }
  '/v1/partners/me/': {
    get: operations['partners_me_retrieve']
  }
  '/v1/payment-callbacks/kassa24/': {
    post: operations['payment_callbacks_kassa24_create']
  }
  '/v1/payments/': {
    get: operations['payments_list']
    post: operations['payments_create']
  }
  '/v1/payments/{id}/': {
    get: operations['payments_retrieve']
    put: operations['payments_update']
    patch: operations['payments_partial_update']
  }
  '/v1/phone/': {
    /** Вывод всех телефонных номеров пользователя по user_id */
    get: operations['phone_list']
    post: operations['phone_create']
  }
  '/v1/phone/{id}/': {
    get: operations['phone_retrieve']
    put: operations['phone_update']
    delete: operations['phone_destroy']
    patch: operations['phone_partial_update']
  }
  '/v1/phones/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['phones_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    post: operations['phones_create']
  }
  '/v1/phones/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['phones_retrieve']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    put: operations['phones_update']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    delete: operations['phones_destroy']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    patch: operations['phones_partial_update']
  }
  '/v1/program-reviews/': {
    get: operations['program_reviews_list']
    post: operations['program_reviews_create']
  }
  '/v1/program-reviews/{id}/': {
    get: operations['program_reviews_retrieve']
  }
  '/v1/records/{city}/{entity}/': {
    get: operations['records_retrieve']
  }
  '/v1/service-cart/': {
    /** Корзина тура для проведения оплаты */
    get: operations['service_cart_list']
    /** Корзина тура для проведения оплаты */
    post: operations['service_cart_create']
  }
  '/v1/service-cart/{id}/': {
    /** Корзина тура для проведения оплаты */
    get: operations['service_cart_retrieve']
  }
  '/v1/shots/': {
    /** Эндпоинт для изображения туров */
    get: operations['shots_list']
    /** Эндпоинт для изображения туров */
    post: operations['shots_create']
  }
  '/v1/shots/{id}/': {
    /** Эндпоинт для изображения туров */
    get: operations['shots_retrieve']
    /** Эндпоинт для изображения туров */
    put: operations['shots_update']
    /** Эндпоинт для изображения туров */
    delete: operations['shots_destroy']
    /** Эндпоинт для изображения туров */
    patch: operations['shots_partial_update']
  }
  '/v1/shots/delete/': {
    /** Эндпоинт для изображения туров */
    delete: operations['shots_delete_destroy']
  }
  '/v1/tour-apps/apps/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['tour_apps_apps_list']
  }
  '/v1/tour-apps/apps/{id}/': {
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    get: operations['tour_apps_apps_retrieve']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    put: operations['tour_apps_apps_update']
    /**
     * Overrides get_serializer_class to choose the read serializer
     * for GET requests and the write serializer for POST requests.
     *
     * Set read_serializer_class and write_serializer_class attributes on a
     * viewset.
     */
    patch: operations['tour_apps_apps_partial_update']
  }
  '/v1/tour-apps/comments/': {
    post: operations['tour_apps_comments_create']
  }
  '/v1/tour-apps/comments/{id}/': {
    put: operations['tour_apps_comments_update']
    delete: operations['tour_apps_comments_destroy']
    patch: operations['tour_apps_comments_partial_update']
  }
  '/v1/tourPrice/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['tourPrice_list']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    post: operations['tourPrice_create']
  }
  '/v1/tourPrice/{id}/': {
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    get: operations['tourPrice_retrieve']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    put: operations['tourPrice_update']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    delete: operations['tourPrice_destroy']
    /**
     * A viewset that provides default `create()`, `retrieve()`, `update()`,
     * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
     */
    patch: operations['tourPrice_partial_update']
  }
  '/v1/tourSubscribe/': {
    /** Retrieve a list of instances of the model */
    get: operations['tourSubscribe_list']
    post: operations['tourSubscribe_create']
  }
  '/v1/tourSubscribe/{id}/': {
    get: operations['tourSubscribe_retrieve']
  }
  '/v1/tourSubscribe/subscribe_prices/': {
    get: operations['tourSubscribe_subscribe_prices_list']
  }
  '/v1/tours/': {
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    get: operations['tours_list']
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    post: operations['tours_create']
  }
  '/v1/tours/{id}/': {
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    get: operations['tours_retrieve']
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    put: operations['tours_update']
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    delete: operations['tours_destroy']
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    patch: operations['tours_partial_update']
  }
  '/v1/tours/me/': {
    /** Для подробного просмотра своих туров. Если тур не прошёл модерацию, то только будет видно только самому пользователю */
    get: operations['tours_me_retrieve']
  }
  '/v1/tours/medicalProfiles/': {
    /**
     * API endpoint для туров.
     *
     * retrieve: tours/{id}/
     * Возвращает конкретный тур
     *
     * list:
     * Возвращает все туры которые имеют поле is_moderated=true
     *
     * me:
     * Возвращает список всех туров пользователя
     *
     *
     * CurrencyEnum:  0: "USD",
     *                 1: "KZT",
     *                 2: "UZS",
     *                 3: "KGS",
     *                 4: "EUR",
     */
    get: operations['tours_medicalProfiles_retrieve']
  }
  '/v1/tours/slug/{slug}/': {
    get: operations['tours_slug_retrieve']
  }
  '/v1/users/{id}/': {
    get: operations['users_retrieve']
    put: operations['users_update']
    patch: operations['users_partial_update']
  }
  '/v1/users/logout/': {
    post: operations['users_logout_create']
  }
  '/v1/users/me/': {
    /** Не используйте /me для просмотра подробностей */
    get: operations['users_me_retrieve']
  }
  '/v1/users/password/change/': {
    put: operations['users_password_change_update']
    patch: operations['users_password_change_partial_update']
  }
  '/v1/users/passwordReset/change/': {
    put: operations['users_passwordReset_change_update']
    patch: operations['users_passwordReset_change_partial_update']
  }
  '/v1/users/passwordReset/verify/': {
    /** Верификация кода для восстановления пароля */
    post: operations['users_passwordReset_verify_create']
  }
  '/v1/users/register/client/': {
    /** Регистрация простого смертного пользователя */
    post: operations['users_register_client_create']
  }
  '/v1/users/register/part/': {
    post: operations['users_register_part_create']
  }
  '/v1/users/register/partner/': {
    /**
     * Регистрация организации, требуется отправить либо телефонный номер либо эмейл
     *
     * Обязательно указать юзернейм для платежной системы
     */
    post: operations['users_register_partner_create']
  }
}

export interface components {
  schemas: {
    ActivateCode: {
      number: string
    }
    ActivateCodeRequest: {
      number: string
    }
    AdditionalInfoServices: {
      id: number
      /** Наименование услуги */
      service: string
      title: number
    }
    AdditionalInfoServicesRead: {
      /** Наименование услуги */
      service: string
      id: number
    }
    AdditionalInfoServicesReadRequest: {
      /** Наименование услуги */
      service: string
    }
    AdditionalInfoServicesRequest: {
      /** Наименование услуги */
      service: string
      title: number
    }
    AdditionalTitles: {
      id: number
      name: string
      tour?: number | null
    }
    AdditionalTitlesRequest: {
      name: string
      tour?: number | null
    }
    AdditonalInfoTitle: {
      id: number
      additional_services: Array<components['schemas']['AdditionalInfoServicesRead']>
      title_name: string
      tour: number
      title: number
    }
    AdditonalInfoTitleRequest: {
      tour: number
      title: number
    }
    /**
     * @description * `-1` - Сообщение не отправлено
     * * `0` - Сообщение отправлено
     * * `1` - Подтверждено
     * @enum {integer}
     */
    ApprovedStatusEnum: -1 | 0 | 1
    AverageGuideRating: {
      /** Format: double */
      service__avg: number | null
      /** Format: double */
      location__avg: number | null
      /** Format: double */
      staff__avg: number | null
      /** Format: double */
      proportion__avg: number | null
      reviews__count: number | null
    }
    AverageRating: {
      /** Format: double */
      service__avg: number | null
      /** Format: double */
      purity__avg: number | null
      /** Format: double */
      location__avg: number | null
      /** Format: double */
      staff__avg: number | null
      /** Format: double */
      proportion__avg: number | null
      comments__count: number | null
    }
    /**
     * @description * `light` - Лёгкий (базовые вещи и перекус)
     * * `medium` - Средний (портфель до 20 кг)
     * * `heavy` - Тяжёлый (багаж до 50 кг)
     * @enum {string}
     */
    BackpackWeightEnum: 'light' | 'medium' | 'heavy'
    Category: {
      title: string
      title_color: string
      slug: string
      photo: string
      icon: string
      column: string
      type: string
      is_main: boolean
    }
    City: {
      id: number
      name: string
      region: number
    }
    /** @description АПИ для кода */
    CodeRequest: {
      userId: number
      hashCode: string
    }
    CommentTour: {
      id: number
      userData: string | null
      /** Чистота */
      purity?: number
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      /** Format: date-time */
      created_at: string
      tour: number
      user: number
    }
    CommentTourApplication: {
      id: number
      comment: string
      /** Format: date-time */
      created_at: string
      /** Format: date-time */
      updated_at: string
      tour_application: number
    }
    CommentTourApplicationRequest: {
      comment: string
      tour_application: number
    }
    CommentTourRequest: {
      /** Чистота */
      purity?: number
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      tour: number
      user: number
    }
    /**
     * @description * `easy` - Лёгкий
     * * `medium` - Средний
     * * `hard` - Сложный
     * @enum {string}
     */
    ComplexityEnum: 'easy' | 'medium' | 'hard'
    Content: {
      id: number
      /** @default Көктерек */
      title?: string
      /** @default 3.5 */
      avg_rating: number | null
      /** @default kokterek */
      slug?: string
      /** @default tour */
      type?: string
      /**
       * @default [
       *   "cache/72/12/7212a7f6ff2346379687fc5a9419c039.webp"
       * ]
       */
      shots: string[] | null
      city: string | null
      minimum_price: number
      category: string
      category_slug: string
      is_top: boolean
      reviews_count: number
    }
    CookieTokenRefresh: {
      access: string
    }
    Country: {
      id: number
      name: string
    }
    CountryRequest: {
      name: string
    }
    CreateSubscribe: {
      payment_link: string | null
      /** @default false */
      error: boolean
      error_msg: string | null
    }
    CreateSubscribeRequest: {
      tour: number
      subscribe_price: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    CreateTourShots: {
      id: number
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    CreateTourShotsRequest: {
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    /**
     * @description * `0` - USD
     * * `1` - KZT
     * * `2` - UZS
     * * `3` - KGS
     * * `4` - EUR
     * @enum {integer}
     */
    CurrencyEnum: 0 | 1 | 2 | 3 | 4
    /**
     * @description * `1` - ПОНЕДЕЛЬНИК
     * * `2` - ВТОРНИК
     * * `3` - СРЕДА
     * * `4` - ЧЕТВЕРГ
     * * `5` - ПЯТНИЦА
     * * `6` - СУББОТА
     * * `0` - ВОСКРЕСЕНЬЕ
     * @enum {integer}
     */
    DaysEnum: 1 | 2 | 3 | 4 | 5 | 6 | 0
    DetailViewTourShots: {
      id: number
      thumbnail: string
      order: number
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    /**
     * @description * `m` - метр
     * * `km` - км
     * @enum {string}
     */
    DistanceUnitEnum: 'm' | 'km'
    /**
     * @description * `0` - Удостоверение личности
     * * `1` - Паспорт
     * * `2` - Свидетельство о рождении
     * @enum {integer}
     */
    DocumentEnum: 0 | 1 | 2
    /**
     * @description * `minutes` - Минут
     * * `hours` - Час
     * * `days` - День
     * * `weeks` - Неделя
     * @enum {string}
     */
    DurationTypeEnum: 'minutes' | 'hours' | 'days' | 'weeks'
    EmailAddress: {
      id: number
      is_verified: boolean
      /** Format: email */
      email: string
      user: number
    }
    EmailAddressRequest: {
      /** Format: email */
      email: string
      user: number
    }
    FirstPageCountries: {
      type: string
      name: string
      cities: string
    }
    /**
     * @description * `0` - Мужчина
     * * `1` - Женщина
     * @enum {integer}
     */
    GenderEnum: 0 | 1
    Guide: {
      id: number
      guide_shots: Array<components['schemas']['GuideShots']> | null
      /** @default 0 */
      minimum_price: number
      /** @default true */
      is_moderated: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название гида */
      title: string
      /** Общая информация */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Адрес организации */
      address?: string | null
      /** Время работы */
      working_time?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /**
       * Долгота адреса
       * Format: double
       */
      lon?: number | null
      /**
       * Широта адреса
       * Format: double
       */
      lat?: number | null
      /** Слаг */
      slug?: string
      /**
       * Организация
       * @description Прикрепленная организация к гиду
       */
      org?: number | null
      /** Категория */
      category: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
    }
    GuideList: {
      id: number
      /** Название гида */
      title: string
      guide_shots: Array<components['schemas']['GuideShots']> | null
      /** @default 0 */
      minimum_price: number
      average_rating: components['schemas']['AverageGuideRating']
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    GuidePOSTShots: {
      id: number
      thumbnail: string
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Гид
       * @description Прикрепленный гид
       */
      guide: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    GuidePOSTShotsRequest: {
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /**
       * Гид
       * @description Прикрепленный гид
       */
      guide: number
    }
    GuideProgram: {
      id: number
      languages: Array<components['schemas']['LanguagesEnum']>
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название программы */
      name: string
      /** Тип программы */
      type: components['schemas']['Type2f2Enum']
      /** Цена */
      price: number
      /**
       * Долгота места встречи
       * Format: double
       */
      venue_lon: number
      /**
       * Широта места встречи
       * Format: double
       */
      venue_lat: number
      /** Адрес места встречи */
      venue_address: string
      /** Скрыть */
      hide?: boolean
      /** Сложность */
      complexity: components['schemas']['ComplexityEnum']
      duration: number
      /** Тип времени продолжительности */
      duration_type: components['schemas']['DurationTypeEnum']
      /** Вес рюкзака */
      backpack_weight: components['schemas']['BackpackWeightEnum']
      /** Количество мест */
      seats_count: number
      /** Примечание */
      remarks?: string | null
      /** Возраст детей */
      children_age: number
      /** Дистанция */
      distance: number
      /** Единица измерения дистанции */
      distance_unit: components['schemas']['DistanceUnitEnum']
      /** Место встречи */
      completion_site: string
      guide: number
      /** Включенные услуги */
      services?: number[]
      /** Не включенные услуги */
      excluded_services?: number[]
    }
    GuideProgramDetail: {
      id: number
      languages: Array<components['schemas']['LanguagesEnum']>
      program_shots: Array<components['schemas']['ProgramShots']>
      services: Array<components['schemas']['GuideServicesSmall']>
      excluded_services: Array<components['schemas']['GuideServicesSmall']>
      guide_name: string
      average_rating: components['schemas']['AverageGuideRating']
      /** Расписание программы гида */
      schedules: Array<components['schemas']['ProgramSchedule']>
      /** Местности программы */
      places: Array<components['schemas']['ProgramPlaces']>
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название программы */
      name: string
      /** Тип программы */
      type: components['schemas']['Type2f2Enum']
      /** Цена */
      price: number
      /**
       * Долгота места встречи
       * Format: double
       */
      venue_lon: number
      /**
       * Широта места встречи
       * Format: double
       */
      venue_lat: number
      /** Адрес места встречи */
      venue_address: string
      /** Скрыть */
      hide?: boolean
      /** Сложность */
      complexity: components['schemas']['ComplexityEnum']
      duration: number
      /** Тип времени продолжительности */
      duration_type: components['schemas']['DurationTypeEnum']
      /** Вес рюкзака */
      backpack_weight: components['schemas']['BackpackWeightEnum']
      /** Количество мест */
      seats_count: number
      /** Примечание */
      remarks?: string | null
      /** Возраст детей */
      children_age: number
      /** Дистанция */
      distance: number
      /** Единица измерения дистанции */
      distance_unit: components['schemas']['DistanceUnitEnum']
      /** Место встречи */
      completion_site: string
      guide: number
    }
    GuideProgramList: {
      id: number
      /** Название программы */
      name: string
      program_shots: Array<components['schemas']['ProgramShots']>
      /** Цена */
      price: number
      /** Количество мест */
      seats_count: number
    }
    GuideProgramRequest: {
      languages: Array<components['schemas']['LanguagesEnum']>
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Название программы */
      name: string
      /** Тип программы */
      type: components['schemas']['Type2f2Enum']
      /** Цена */
      price: number
      /**
       * Долгота места встречи
       * Format: double
       */
      venue_lon: number
      /**
       * Широта места встречи
       * Format: double
       */
      venue_lat: number
      /** Адрес места встречи */
      venue_address: string
      /** Скрыть */
      hide?: boolean
      /** Сложность */
      complexity: components['schemas']['ComplexityEnum']
      duration: number
      /** Тип времени продолжительности */
      duration_type: components['schemas']['DurationTypeEnum']
      /** Вес рюкзака */
      backpack_weight: components['schemas']['BackpackWeightEnum']
      /** Количество мест */
      seats_count: number
      /** Примечание */
      remarks?: string | null
      /** Возраст детей */
      children_age: number
      /** Дистанция */
      distance: number
      /** Единица измерения дистанции */
      distance_unit: components['schemas']['DistanceUnitEnum']
      /** Место встречи */
      completion_site: string
      guide: number
      /** Включенные услуги */
      services?: number[]
      /** Не включенные услуги */
      excluded_services?: number[]
    }
    GuideRead: {
      id: number
      region: components['schemas']['Region']
      country: components['schemas']['Country']
      average_rating: components['schemas']['AverageGuideRating']
      guide_shots: Array<components['schemas']['GuideShots']> | null
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название гида */
      title: string
      /** Общая информация */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Адрес организации */
      address?: string | null
      /** Время работы */
      working_time?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /**
       * Долгота адреса
       * Format: double
       */
      lon?: number | null
      /**
       * Широта адреса
       * Format: double
       */
      lat?: number | null
      /** Слаг */
      slug?: string
      /** Хиты продаж? */
      is_top?: boolean
      /** Прошел модерацию */
      is_moderated?: boolean
      /**
       * Подписан?
       * @description Отметьте, если он подписан
       */
      is_subscribed?: boolean
      /** Format: date-time */
      created_at: string
      /**
       * Организация
       * @description Прикрепленная организация к гиду
       */
      org?: number | null
      /** Категория */
      category: number
      /** Город */
      city?: number | null
    }
    GuideRequest: {
      /** Название гида */
      title: string
      /** Общая информация */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Адрес организации */
      address?: string | null
      /** Время работы */
      working_time?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /**
       * Долгота адреса
       * Format: double
       */
      lon?: number | null
      /**
       * Широта адреса
       * Format: double
       */
      lat?: number | null
      /** Слаг */
      slug?: string
      /**
       * Организация
       * @description Прикрепленная организация к гиду
       */
      org?: number | null
      /** Категория */
      category: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
    }
    GuideReview: {
      id: number
      avatar: string | null
      userData: string | null
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      /** Format: date-time */
      created_at: string
      guide: number
      user: number
    }
    GuideReviewRequest: {
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      guide: number
      user: number
    }
    GuideServices: {
      id: number
      /** Название услуги */
      title: string
      /** Гид */
      guide: number
    }
    GuideServicesRequest: {
      /** Название услуги */
      title: string
      /** Гид */
      guide: number
    }
    GuideServicesSmall: {
      id: number
      title: string
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    GuideShots: {
      id: number
      thumbnail: string
      order: number
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Гид
       * @description Прикрепленный гид
       */
      guide: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    GuideShotsRequest: {
      order: number
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /**
       * Гид
       * @description Прикрепленный гид
       */
      guide: number
    }
    /**
     * @description * `ru` - Русский
     * * `en` - Английский
     * * `kz` - Казахский
     * * `uz` - Узбекский
     * * `tj` - Таджикский
     * * `kg` - Кыргызский
     * * `cn` - Китайский
     * * `fr` - Французский
     * * `es` - Испанский
     * * `it` - Итальянский
     * @enum {string}
     */
    LanguagesEnum:
    | 'ru'
    | 'en'
    | 'kz'
    | 'uz'
    | 'tj'
    | 'kg'
    | 'cn'
    | 'fr'
    | 'es'
    | 'it'
    ListApplication: {
      region: string
      category: string
      /** Полное имя */
      fullName: string
      /** Телефонный номер */
      phoneNumber: string
      /** Описание */
      description?: string | null
      /** Format: date-time */
      created_at: string
    }
    ListNumbers: {
      id: number
      number_services: Array<components['schemas']['TourNumbersServices']>
      comforts: Array<components['schemas']['NumberComfort']>
      numbershots_set: Array<components['schemas']['NumberShots']>
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      title?: string
      place_count: number
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour: number
    }
    ListNumbersRequest: {
      comforts: Array<components['schemas']['NumberComfortRequest']>
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      title?: string
      place_count: number
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour: number
    }
    ListPackage: {
      id: number
      package_services: Array<components['schemas']['TourPackageServices']>
      number: components['schemas']['ListNumbers']
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title: string
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour: number
    }
    ListPackageRequest: {
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title: string
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour: number
    }
    ListTourApplication: {
      id: number
      application: components['schemas']['ListApplication']
      /** Статус */
      status?: boolean
      tour: number
    }
    Locked: {
      /** @default Нельзя использовать ?id__in в сущности `all` */
      message?: string
    }
    Logout: {
      refresh: string
    }
    LogoutRequest: {
      refresh: string
    }
    MainPageTourShots: {
      id: number
      thumbnail: string
      order: number
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    /** @enum {undefined} */
    NullEnum: null
    NumberCabinets: {
      id: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /**
       * Порядковый номер
       * @description Номер кабинета пакета, присвоится автоматически, при создании пакета
       */
      number: number
      /**
       * Название кабинета
       * @description Наименование номера кабинета вручную
       */
      humanize_name?: string | null
      /**
       * Номер
       * @description Здесь указывается номер тура
       */
      tour_number: number
    }
    NumberCabinetsRequest: {
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Порядковый номер
       * @description Номер кабинета пакета, присвоится автоматически, при создании пакета
       */
      number: number
      /**
       * Название кабинета
       * @description Наименование номера кабинета вручную
       */
      humanize_name?: string | null
      /**
       * Номер
       * @description Здесь указывается номер тура
       */
      tour_number: number
    }
    NumberComfort: {
      id: number
      /** Название комфорта */
      name: string
      /** Файл иконки */
      icon: string
    }
    NumberComfortRequest: {
      /** Название комфорта */
      name: string
      /**
       * Файл иконки
       * Format: binary
       */
      icon: string
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    NumberShots: {
      id: number
      thumbnail: string
      order: number
      /** Изображение */
      photo: string
      /** Имя изображения */
      name?: string | null
      /** Номер */
      tour_number: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    NumberShotsCreate: {
      id: number
      /** Изображение */
      photo: string
      /** Имя изображения */
      name?: string | null
      /** Номер */
      tour_number: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    NumberShotsCreateRequest: {
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /** Имя изображения */
      name?: string | null
      /** Номер */
      tour_number: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    NumberShotsRequest: {
      order: number
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /** Имя изображения */
      name?: string | null
      /** Номер */
      tour_number: number
    }
    OrgCategory: {
      id: number
      title: string
      /** Слаг */
      slug?: string
      photo?: string
      icon?: string
      column?: string
      title_color?: string
      is_main?: boolean
    }
    /**
     * @description * `sanatorium` - Санаторий
     * * `zonaotdyxa` - Зона отдыха
     * * `guide` - Гиды
     * @enum {string}
     */
    OrgTypeEnum: 'sanatorium' | 'zonaotdyxa' | 'guide'
    Organization: {
      id: number
      /** Название организации */
      org_name?: string | null
      /** БИН организации */
      bin?: string | null
      /** Проверен */
      is_moderated?: boolean
      /** Тип организации */
      type?: components['schemas']['Type6e2Enum']
      /** Основной аккаунт */
      user: number
    }
    OrganizationRequest: {
      /** Название организации */
      org_name?: string | null
      /** БИН организации */
      bin?: string | null
      /** Проверен */
      is_moderated?: boolean
      /** Тип организации */
      type?: components['schemas']['Type6e2Enum']
      /** Основной аккаунт */
      user: number
    }
    PaginatedListTourApplicationList: {
      /** @example 123 */
      count?: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results?: Array<components['schemas']['ListTourApplication']>
    }
    PartUserCreate: {
      phone: string
      /** @default kz */
      country?: string
      first_name: string
      last_name: string
    }
    PartUserCreateRequest: {
      phone: string
      /** @default kz */
      country?: string
      first_name: string
      last_name: string
    }
    PasswordChange: {
      old_password: string
      new_password1: string
      new_password2: string
    }
    PasswordChangeRequest: {
      old_password: string
      new_password1: string
      new_password2: string
    }
    PasswordResetChange: {
      new_password1: string
      new_password2: string
    }
    PasswordResetChangeRequest: {
      new_password1: string
      new_password2: string
    }
    PatchedAdditionalInfoServicesRequest: {
      /** Наименование услуги */
      service?: string
      title?: number
    }
    PatchedAdditionalTitlesRequest: {
      name?: string
      tour?: number | null
    }
    PatchedAdditonalInfoTitleRequest: {
      tour?: number
      title?: number
    }
    PatchedCommentTourApplicationRequest: {
      comment?: string
      tour_application?: number
    }
    PatchedEmailAddressRequest: {
      /** Format: email */
      email?: string
      user?: number
    }
    PatchedGuideProgramRequest: {
      languages?: Array<components['schemas']['LanguagesEnum']>
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Название программы */
      name?: string
      /** Тип программы */
      type?: components['schemas']['Type2f2Enum']
      /** Цена */
      price?: number
      /**
       * Долгота места встречи
       * Format: double
       */
      venue_lon?: number
      /**
       * Широта места встречи
       * Format: double
       */
      venue_lat?: number
      /** Адрес места встречи */
      venue_address?: string
      /** Скрыть */
      hide?: boolean
      /** Сложность */
      complexity?: components['schemas']['ComplexityEnum']
      duration?: number
      /** Тип времени продолжительности */
      duration_type?: components['schemas']['DurationTypeEnum']
      /** Вес рюкзака */
      backpack_weight?: components['schemas']['BackpackWeightEnum']
      /** Количество мест */
      seats_count?: number
      /** Примечание */
      remarks?: string | null
      /** Возраст детей */
      children_age?: number
      /** Дистанция */
      distance?: number
      /** Единица измерения дистанции */
      distance_unit?: components['schemas']['DistanceUnitEnum']
      /** Место встречи */
      completion_site?: string
      guide?: number
      /** Включенные услуги */
      services?: number[]
      /** Не включенные услуги */
      excluded_services?: number[]
    }
    PatchedGuideRequest: {
      /** Название гида */
      title?: string
      /** Общая информация */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Адрес организации */
      address?: string | null
      /** Время работы */
      working_time?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /**
       * Долгота адреса
       * Format: double
       */
      lon?: number | null
      /**
       * Широта адреса
       * Format: double
       */
      lat?: number | null
      /** Слаг */
      slug?: string
      /**
       * Организация
       * @description Прикрепленная организация к гиду
       */
      org?: number | null
      /** Категория */
      category?: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
    }
    PatchedGuideServicesRequest: {
      /** Название услуги */
      title?: string
      /** Гид */
      guide?: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    PatchedGuideShotsRequest: {
      order?: number
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo?: string
      /**
       * Гид
       * @description Прикрепленный гид
       */
      guide?: number
    }
    PatchedNumberCabinetsRequest: {
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Порядковый номер
       * @description Номер кабинета пакета, присвоится автоматически, при создании пакета
       */
      number?: number
      /**
       * Название кабинета
       * @description Наименование номера кабинета вручную
       */
      humanize_name?: string | null
      /**
       * Номер
       * @description Здесь указывается номер тура
       */
      tour_number?: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    PatchedNumberShotsRequest: {
      order?: number
      /**
       * Изображение
       * Format: binary
       */
      photo?: string
      /** Имя изображения */
      name?: string | null
      /** Номер */
      tour_number?: number
    }
    PatchedOrganizationRequest: {
      /** Название организации */
      org_name?: string | null
      /** БИН организации */
      bin?: string | null
      /** Проверен */
      is_moderated?: boolean
      /** Тип организации */
      type?: components['schemas']['Type6e2Enum']
      /** Основной аккаунт */
      user?: number
    }
    PatchedPasswordChangeRequest: {
      old_password?: string
      new_password1?: string
      new_password2?: string
    }
    PatchedPasswordResetChangeRequest: {
      new_password1?: string
      new_password2?: string
    }
    PatchedPaymentRequest: {
      /** Сумма оплаты */
      amount?: number
      /** Статус оплаты */
      status?: components['schemas']['StatusEnum']
      /** Частичная оплата */
      is_partial?: boolean
      /** Процент частичной оплаты */
      amount_paid_part?: number
      /** Страница с оплатой платежной системы */
      redirect_url?: string | null
      /** Format: binary */
      pdf_file?: string | null
      user?: number
      cart?: number
    }
    PatchedPhoneNumberRequest: {
      phone?: string
      user?: number
    }
    PatchedProfileRequest: {
      /** ИИН пользователя */
      iin?: string | null
      /** Имя */
      first_name?: string
      /** Фамилия */
      last_name?: string
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Основной аккаунт */
      user?: number
    }
    PatchedProgramPlacesRequest: {
      /** Местность */
      terrain?: string
      /** Описание местности */
      description?: string
      program?: number
    }
    PatchedProgramScheduleRequest: {
      /** Заголовок */
      title?: string
      /** Описание */
      description?: string
      /**
       * Время начала
       * Format: time
       */
      start_time?: string
      program?: number
    }
    PatchedReservationsRequest: {
      services?: Array<components['schemas']['ReservationsServicesRequest']>
      package?: number
      /** Format: date */
      start?: string
      /** Format: date */
      end?: string
      number?: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Закрыт на ремонт
       * @description Отметить истина, если закрыт на ремонт
       */
      closed_for_repair?: boolean
      /**
       * Оплачено
       * @description Оплачен ли резерв
       */
      paid?: boolean
      /**
       * Оценено
       * @description Оценена ли резервация
       */
      rated?: boolean
      /** Общая сумма брони */
      amount?: number
      amountOfAdults?: number | null
      amountOfChildren?: number | null
      fullName?: string | null
      phoneNumber?: string | null
      /** Format: email */
      email?: string | null
      /** Примечание */
      remarks?: string | null
      /**
       * Номер комнаты
       * @description Выберите комнату для резерва
       */
      number_cabinets?: number
      partner?: number | null
      tour?: number
      payment?: number | null
    }
    PatchedTourBookingExtraHolidaysRequest: {
      /**
       * День года
       * Format: date
       */
      date?: string
      tour?: number
    }
    PatchedTourBookingHolidayRequest: {
      days?: Array<components['schemas']['DaysEnum']>
      tour?: number
    }
    PatchedTourBookingWeekDaysRequest: {
      days?: Array<components['schemas']['DaysEnum']>
      tour?: number
    }
    PatchedTourLocationRequest: {
      /**
       * Долгота
       * Format: double
       */
      lon?: number | null
      /**
       * Широта
       * Format: double
       */
      lat?: number | null
      tour?: number
    }
    /** @description Сериалайзер для платных услуг тура */
    PatchedTourPaidServicesRequest: {
      /**
       * Название услуги
       * @description Наименование платной услуги
       */
      name?: string
      /**
       * Описание услуги
       * @description Описание конкретной услуги
       */
      description?: string | null
      /**
       * Стоимость услуги
       * @description Стоимость платной услуги
       */
      price?: number
      /** Скрыть */
      hide?: boolean
      /**
       * Прикрепленный тур
       * @description Прикрепленный тур
       */
      tour?: number
    }
    PatchedTourPhonesRequest: {
      /** Тур */
      tour?: number
    }
    PatchedTourPriceFileRequest: {
      /** Format: binary */
      file?: string
      tour?: number
    }
    PatchedTourRequest: {
      org?: number
      /** Название тура */
      title?: string
      /** Описание */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      address?: string | null
      /** Слаг */
      slug?: string
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Имя директора */
      first_name?: string | null
      /** Фамилия директора */
      last_name?: string | null
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /** Время работы */
      working_time?: string | null
      /** Категория */
      category?: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
      medical_profiles?: number[]
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    PatchedTourShotsRequest: {
      order?: number
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo?: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour?: number
    }
    PatchedUpdateTourApplicationRequest: {
      /** Статус */
      status?: boolean
      application?: number
    }
    /**
     * @description Mixin for DRF serializer performance improvement.
     * Provides cache for slow "fields" property.
     */
    PatchedUserRequest: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username?: string
      /** Организация ли? */
      is_organization?: boolean
    }
    PatchedWriteTourNumbersRequest: {
      number_services?: unknown[]
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      title?: string
      place_count?: number
      /** Цена */
      price?: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour?: number
      /** Удобства */
      comforts?: number[]
    }
    PatchedWriteTourPackageRequest: {
      package_services?: unknown[]
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title?: string
      /** Цена */
      price?: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour?: number
      /**
       * Номер пакета
       * @description Укажите сколько местный кабинет в туре
       */
      number?: number
    }
    PayHistoryHistory: {
      id: number
      number_type: string
      services_count: number
      status_name: string
      tour_name: string
      /** Format: date-time */
      created_at: string
      /** Частичная оплата */
      is_partial?: boolean
      /** Процент частичной оплаты */
      amount_paid_part?: number
      /** Страница с оплатой платежной системы */
      redirect_url?: string | null
      pdf_file?: string | null
    }
    PayHistoryHistoryDetail: {
      id: number
      number_type: string
      services_count: number
      status_name: string
      file_field: string | null
      tour_name: string
      /** Format: date */
      reservations_start: string
      /** Format: date */
      reservations_end: string
      /** Сумма оплаты */
      amount: number
      /** Частичная оплата */
      is_partial?: boolean
      /** Процент частичной оплаты */
      amount_paid_part?: number
      /** Страница с оплатой платежной системы */
      redirect_url?: string | null
      pdf_file?: string | null
    }
    Payment: {
      id: number
      /** Сумма оплаты */
      amount: number
      /** Статус оплаты */
      status?: components['schemas']['StatusEnum']
      /** Format: date-time */
      created_at: string
      /** Частичная оплата */
      is_partial?: boolean
      /** Процент частичной оплаты */
      amount_paid_part?: number
      /** Страница с оплатой платежной системы */
      redirect_url?: string | null
      pdf_file?: string | null
      user: number
      cart: number
    }
    PaymentRequest: {
      /** Сумма оплаты */
      amount: number
      /** Статус оплаты */
      status?: components['schemas']['StatusEnum']
      /** Частичная оплата */
      is_partial?: boolean
      /** Процент частичной оплаты */
      amount_paid_part?: number
      /** Страница с оплатой платежной системы */
      redirect_url?: string | null
      /** Format: binary */
      pdf_file?: string | null
      user: number
      cart: number
    }
    PhoneNumber: {
      id: number
      is_verified: boolean
      phone: string
      user: number
    }
    PhoneNumberRequest: {
      phone: string
      user: number
    }
    /**
     * @description * `resort` - Resort
     * * `guide` - Guide
     * * `client` - Client
     * @enum {string}
     */
    PickEnum: 'resort' | 'guide' | 'client'
    PostApplication: {
      id: number
      /** Полное имя */
      fullName: string
      /** Телефонный номер */
      phoneNumber: string
      /** Описание */
      description?: string | null
      /** Format: date-time */
      created_at: string
      /** Регион */
      region: number
      /** Тип тура */
      category: number
    }
    PostApplicationRequest: {
      /** Полное имя */
      fullName: string
      /** Телефонный номер */
      phoneNumber: string
      /** Описание */
      description?: string | null
      /** Регион */
      region: number
      /** Тип тура */
      category: number
    }
    Profile: {
      id: number
      country: components['schemas']['Country']
      region: components['schemas']['Region']
      /** ИИН пользователя */
      iin?: string | null
      /** Имя */
      first_name: string
      /** Фамилия */
      last_name: string
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Основной аккаунт */
      user: number
    }
    ProfileRequest: {
      /** ИИН пользователя */
      iin?: string | null
      /** Имя */
      first_name: string
      /** Фамилия */
      last_name: string
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Основной аккаунт */
      user: number
    }
    ProgramPlaces: {
      id: number
      /** Местность */
      terrain: string
      /** Описание местности */
      description: string
      program: number
    }
    ProgramPlacesRequest: {
      /** Местность */
      terrain: string
      /** Описание местности */
      description: string
      program: number
    }
    ProgramReview: {
      id: number
      avatar: string | null
      userData: string | null
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      /** Format: date-time */
      created_at: string
      program: number
      user: number
    }
    ProgramReviewRequest: {
      /** Сервис */
      service?: number
      /** Местоположение */
      location?: number
      /** Персонал */
      staff?: number
      /** Соотношение цена/качество */
      proportion?: number
      text: string
      program: number
      user: number
    }
    ProgramSchedule: {
      id: number
      /** Заголовок */
      title: string
      /** Описание */
      description: string
      /**
       * Время начала
       * Format: time
       */
      start_time: string
      program: number
    }
    ProgramScheduleRequest: {
      /** Заголовок */
      title: string
      /** Описание */
      description: string
      /**
       * Время начала
       * Format: time
       */
      start_time: string
      program: number
    }
    ProgramShots: {
      thumbnail: string
    }
    Region: {
      id: number
      name: string
      country: number
    }
    RegionRequest: {
      name: string
      country: number
    }
    RegisterOrgRequest: {
      /** Format: email */
      email?: string
      password: string
      phone?: string
      /** Организация ли? */
      is_organization?: boolean
      country: string
      /** Выбор типа */
      pick?: components['schemas']['PickEnum']
      org_name: string
      org_type: components['schemas']['OrgTypeEnum']
    }
    RegisterUserRequest: {
      /** Format: email */
      email?: string
      password: string
      phone?: string
      country?: string
      /** Выбор типа */
      pick?: components['schemas']['PickEnum']
      first_name: string
      last_name: string
    }
    Reservations: {
      id: number
      reservator: components['schemas']['UserRead']
      reservations_services: Array<components['schemas']['ReservationsServicesRead']>
      reservations_packages: components['schemas']['ListPackage']
      /** Format: date */
      reservations_start: string
      /** Format: date */
      reservations_end: string
      number: number
      cart_packages: Array<components['schemas']['WriteServiceCartPackages']>
      cart_services: Array<components['schemas']['ServiceCartCount']>
      payment_amount: number | null
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /**
       * Закрыт на ремонт
       * @description Отметить истина, если закрыт на ремонт
       */
      closed_for_repair?: boolean
      /**
       * Оплачено
       * @description Оплачен ли резерв
       */
      paid?: boolean
      /**
       * Оценено
       * @description Оценена ли резервация
       */
      rated?: boolean
      /** Общая сумма брони */
      amount: number
      amountOfAdults?: number | null
      amountOfChildren?: number | null
      fullName?: string | null
      phoneNumber?: string | null
      /** Format: email */
      email?: string | null
      /** Примечание */
      remarks?: string | null
      /** Статус подтверждения */
      approved_status: components['schemas']['ApprovedStatusEnum']
      /**
       * Номер комнаты
       * @description Выберите комнату для резерва
       */
      number_cabinets?: number
      partner?: number | null
      tour: number
      payment?: number | null
    }
    ReservationsCheck: {
      count: number
    }
    ReservationsRequest: {
      services?: Array<components['schemas']['ReservationsServicesRequest']>
      package?: number
      /** Format: date */
      start: string
      /** Format: date */
      end: string
      number: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Закрыт на ремонт
       * @description Отметить истина, если закрыт на ремонт
       */
      closed_for_repair?: boolean
      /**
       * Оплачено
       * @description Оплачен ли резерв
       */
      paid?: boolean
      /**
       * Оценено
       * @description Оценена ли резервация
       */
      rated?: boolean
      /** Общая сумма брони */
      amount: number
      amountOfAdults?: number | null
      amountOfChildren?: number | null
      fullName?: string | null
      phoneNumber?: string | null
      /** Format: email */
      email?: string | null
      /** Примечание */
      remarks?: string | null
      /**
       * Номер комнаты
       * @description Выберите комнату для резерва
       */
      number_cabinets?: number
      partner?: number | null
      tour: number
      payment?: number | null
    }
    ReservationsServices: {
      service?: number | null
      count?: number
    }
    ReservationsServicesRead: {
      service?: number | null
      count?: number
      service_name: string
    }
    ReservationsServicesReadRequest: {
      service?: number | null
      count?: number
    }
    ReservationsServicesRequest: {
      service?: number | null
      count?: number
    }
    ResetPassword: {
      /** Format: email */
      email?: string
      phone?: string
    }
    ResetPasswordRequest: {
      /** Format: email */
      email?: string
      phone?: string
    }
    ResponseRegister: {
      access: string
    }
    RetrieveNumbers: {
      id: number
      number_services: Array<components['schemas']['TourNumbersServices']>
      comforts: Array<components['schemas']['NumberComfort']>
      numbershots_set: Array<components['schemas']['NumberShots']>
      extra_holidays: Array<components['schemas']['TourBookingExtraHolidays']>
      holidays: string[]
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      title?: string
      place_count: number
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour: number
    }
    RetrievePackage: {
      id: number
      package_services: Array<components['schemas']['TourPackageServices']>
      number: components['schemas']['ListNumbers']
      extra_holidays: Array<components['schemas']['TourBookingExtraHolidays']>
      holidays: string[]
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title: string
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour: number
    }
    RetrieveTourApplication: {
      id: number
      application: components['schemas']['ListApplication']
      application_comments: Array<components['schemas']['CommentTourApplication']>
      /** Статус */
      status?: boolean
      tour: number
    }
    SearchCity: {
      name: string
      slug: string
    }
    ServiceCart: {
      id: number
      services: Array<components['schemas']['ServiceCartCount']>
      packages: Array<components['schemas']['ListPackage']>
      payments: components['schemas']['Payment']
      /**
       * Дата начала тура
       * Format: date
       * @description Дата начала тура
       */
      start: string
      /**
       * Дата окончания тура
       * Format: date
       * @description Дата окончания тура
       */
      end: string
      /**
       * Количество человек
       * @description Количество человек
       */
      count?: number
      /**
       * Цена
       * @description Общая цена при покупке тура
       */
      price?: number
      /** @description Выбранный тур пользователя */
      tour: number
      /** Номер тура */
      number: number
    }
    ServiceCartCount: {
      id: number
      service: components['schemas']['TourPaidServices']
      count?: number
      /** Корзина тура */
      service_cart: number
    }
    ServiceCartCountRequest: {
      service: components['schemas']['TourPaidServicesRequest']
      count?: number
      /** Корзина тура */
      service_cart: number
    }
    ServiceCartVisitors: {
      /** Имя */
      first_name: string
      /** Фамилия */
      last_name: string
      /**
       * Дата рождения
       * Format: date
       */
      birthday_date: string
      /** Код страны */
      citizenship: string
      /** Тип документа */
      document: components['schemas']['DocumentEnum']
      /** Номер документа */
      doc_number: string
      /** Пол */
      gender: components['schemas']['GenderEnum']
    }
    ServiceCartVisitorsRequest: {
      /** Имя */
      first_name: string
      /** Фамилия */
      last_name: string
      /**
       * Дата рождения
       * Format: date
       */
      birthday_date: string
      /** Код страны */
      citizenship: string
      /** Тип документа */
      document: components['schemas']['DocumentEnum']
      /** Номер документа */
      doc_number: string
      /** Пол */
      gender: components['schemas']['GenderEnum']
    }
    /**
     * @description * `0` - Не оплачено
     * * `1` - Оплачено
     * @enum {integer}
     */
    StatusEnum: 0 | 1
    SubscribePrices: {
      id: number
      /** Название пакета */
      name: string
      /** Цена */
      price: number
      numbers_of_months?: number
    }
    TokenObtainLifetime: {
      client: components['schemas']['Profile']
      partner: components['schemas']['Organization']
      userId: number
      access: string
      lifetime: number
      tours: Array<components['schemas']['ToursOnOrganization']>
      guide: number | null
      email: components['schemas']['EmailAddress']
      phone: components['schemas']['PhoneNumber']
      pick: string
      username: string
    }
    TokenObtainLifetimeRequest: {
      username: string
      password: string
    }
    Tour: {
      id: number
      org: number
      /** @default true */
      is_moderated: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название тура */
      title: string
      /** Описание */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      address?: string | null
      /** Слаг */
      slug?: string
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Имя директора */
      first_name?: string | null
      /** Фамилия директора */
      last_name?: string | null
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /** Время работы */
      working_time?: string | null
      /** Категория */
      category: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
      medical_profiles?: number[]
    }
    TourBookingExtraHolidays: {
      id: number
      /**
       * День года
       * Format: date
       */
      date: string
      tour: number
    }
    TourBookingExtraHolidaysRequest: {
      /**
       * День года
       * Format: date
       */
      date: string
      tour: number
    }
    TourBookingHoliday: {
      id: number
      days: Array<components['schemas']['DaysEnum']>
      extra_holidays: Array<components['schemas']['TourBookingExtraHolidays']>
      tour: number
    }
    TourBookingHolidayRequest: {
      days: Array<components['schemas']['DaysEnum']>
      tour: number
    }
    TourBookingWeekDays: {
      days: Array<components['schemas']['DaysEnum']>
      tour: number
    }
    TourBookingWeekDaysRequest: {
      days: Array<components['schemas']['DaysEnum']>
      tour: number
    }
    TourList: {
      id: number
      /** Название тура */
      title: string
      /** Описание */
      description?: string | null
      region_name: string | null
      category_name: string | null
      /** Категория */
      category: number
      minimum_price: number
      tour_shots: Array<components['schemas']['MainPageTourShots']> | null
      category_slug: string
      /** Слаг */
      slug?: string
      averageRating: components['schemas']['AverageRating']
    }
    TourLocation: {
      id: number
      /**
       * Долгота
       * Format: double
       */
      lon?: number | null
      /**
       * Широта
       * Format: double
       */
      lat?: number | null
      tour: number
    }
    TourLocationRequest: {
      /**
       * Долгота
       * Format: double
       */
      lon?: number | null
      /**
       * Широта
       * Format: double
       */
      lat?: number | null
      tour: number
    }
    TourMedicalProfile: {
      id: number
      name: string
    }
    TourNumbersServices: {
      /** Услуга включенного номера */
      title: string
    }
    TourNumbersServicesRequest: {
      /** Услуга включенного номера */
      title: string
    }
    TourPackageServices: {
      id: number
      /** Услуга сервиса */
      title: string
      /** Скрыть */
      hide?: boolean
      package: number
    }
    TourPackageServicesRequest: {
      /** Услуга сервиса */
      title: string
      /** Скрыть */
      hide?: boolean
      package: number
    }
    /** @description Сериалайзер для платных услуг тура */
    TourPaidServices: {
      id: number
      order: number
      /**
       * Название услуги
       * @description Наименование платной услуги
       */
      name: string
      /**
       * Описание услуги
       * @description Описание конкретной услуги
       */
      description?: string | null
      /**
       * Стоимость услуги
       * @description Стоимость платной услуги
       */
      price: number
      /** Скрыть */
      hide?: boolean
      /**
       * Прикрепленный тур
       * @description Прикрепленный тур
       */
      tour: number
    }
    /** @description Сериалайзер для платных услуг тура */
    TourPaidServicesRequest: {
      /**
       * Название услуги
       * @description Наименование платной услуги
       */
      name: string
      /**
       * Описание услуги
       * @description Описание конкретной услуги
       */
      description?: string | null
      /**
       * Стоимость услуги
       * @description Стоимость платной услуги
       */
      price: number
      /** Скрыть */
      hide?: boolean
      /**
       * Прикрепленный тур
       * @description Прикрепленный тур
       */
      tour: number
    }
    TourPhones: {
      id: number
      phone: string
      /** Тур */
      tour: number
    }
    TourPhonesRequest: {
      /** Тур */
      tour: number
    }
    TourPriceFile: {
      id: number
      file: string
      tour: number
    }
    TourPriceFileRequest: {
      /** Format: binary */
      file: string
      tour: number
    }
    TourRead: {
      id: number
      category_slug: string
      tour_shots: Array<components['schemas']['DetailViewTourShots']> | null
      comments: Array<components['schemas']['CommentTour']> | null
      region: components['schemas']['Region']
      country: components['schemas']['Country']
      averageRating: components['schemas']['AverageRating']
      additional_titles: Array<components['schemas']['AdditonalInfoTitle']>
      medical_profiles: Array<components['schemas']['TourMedicalProfile']>
      numbers_exists: boolean
      guides_exists: boolean
      paid_services_exists: boolean
      packages_exists: boolean
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Название тура */
      title: string
      /** Описание */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      address?: string | null
      /** Слаг */
      slug?: string
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Имя директора */
      first_name?: string | null
      /** Фамилия директора */
      last_name?: string | null
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /** Время работы */
      working_time?: string | null
      /** Хиты продаж? */
      is_top?: boolean
      /** Прошел модерацию */
      is_moderated?: boolean
      /**
       * Организация
       * @description Прикрепленная организация к туру
       */
      org?: number | null
      /** Категория */
      category: number
      /** Город */
      city?: number | null
    }
    TourRequest: {
      org: number
      /** Название тура */
      title: string
      /** Описание */
      description?: string | null
      /** Валюта */
      currency?:
      | (
        | components['schemas']['CurrencyEnum']
        | components['schemas']['NullEnum']
      )
      | null
      BIN?: string | null
      IIK?: string | null
      BIK?: string | null
      /** Для предоплаты (IBAN) */
      requisites?: string | null
      address?: string | null
      /** Слаг */
      slug?: string
      /**
       * Format: email
       * @description Пожалуйста напишите ваш эмейл
       */
      email?: string | null
      /** Имя директора */
      first_name?: string | null
      /** Фамилия директора */
      last_name?: string | null
      /** Район */
      district?: string | null
      /** Улица */
      street?: string | null
      /** Номер дома */
      home_number?: string | null
      /** Ссылка на Youtube */
      youtube_url?: string | null
      /** Время работы */
      working_time?: string | null
      /** Категория */
      category: number
      /** Страна */
      country?: number | null
      /** Регион */
      region?: number | null
      /** Город */
      city?: number | null
      medical_profiles?: number[]
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    TourShots: {
      id: number
      order: number
      /** Имя изображения */
      name?: string | null
      /** Изображение */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    /**
     * @description A ModelSerializer to provide a serializer that can be update and create
     * objects in a specific order.
     *
     * Typically a `models.PositiveIntegerField` field called `order` is used to
     * store the order of the Model objects. This field can be customized by setting
     * the `order_field_name` attribute on the Model class.
     *
     * This serializer will move the object to the correct
     * order if the ordering field is passed in the validated data.
     */
    TourShotsRequest: {
      order: number
      /** Имя изображения */
      name?: string | null
      /**
       * Изображение
       * Format: binary
       */
      photo: string
      /**
       * Изображения тура
       * @description Прикрепленный тур
       */
      tour: number
    }
    TourSubscribe: {
      id: number
      overdue: boolean
      is_paid: boolean
      /** Format: date */
      created_at: string
      tour: number
      /** Тип подписки */
      subscribe_price: number
    }
    ToursOnOrganization: {
      id: number
      /** Название тура */
      title: string
      category_name: string | null
      /** Категория */
      category: number
      region: components['schemas']['Region']
      country: components['schemas']['Country']
    }
    ToursOnOrganizationRequest: {
      /** Название тура */
      title: string
      /** Категория */
      category: number
    }
    /**
     * @description * `individual` - Индивидуальный
     * * `group` - Групповой
     * @enum {string}
     */
    Type2f2Enum: 'individual' | 'group'
    /**
     * @description * `sanatorium` - Санаторий
     * * `zonaotdyxa` - Зона отдыха
     * * `guide` - Гиды
     * @enum {string}
     */
    Type6e2Enum: 'sanatorium' | 'zonaotdyxa' | 'guide'
    UpdateTourApplication: {
      id: number
      tour: number
      /** Статус */
      status?: boolean
      application: number
    }
    UpdateTourApplicationRequest: {
      /** Статус */
      status?: boolean
      application: number
    }
    /**
     * @description Mixin for DRF serializer performance improvement.
     * Provides cache for slow "fields" property.
     */
    User: {
      id: number
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string
      /** Организация ли? */
      is_organization?: boolean
      email: components['schemas']['EmailAddress']
      phone: components['schemas']['PhoneNumber']
    }
    UserRead: {
      id: number
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string
      /** Организация ли? */
      is_organization?: boolean
      client: components['schemas']['Profile']
      partner: components['schemas']['Organization']
      email: components['schemas']['EmailAddress'] | null
      phone: components['schemas']['PhoneNumber'] | null
      userId: number
      tours: Array<components['schemas']['ToursOnOrganization']>
      guide: number | null
      pick: string
    }
    UserReadRequest: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string
      /** Организация ли? */
      is_organization?: boolean
    }
    /**
     * @description Mixin for DRF serializer performance improvement.
     * Provides cache for slow "fields" property.
     */
    UserRequest: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string
      /** Организация ли? */
      is_organization?: boolean
    }
    UserVerify: {
      message: string
      token: string | null
    }
    WriteServiceCart: {
      id: number
      services?: Array<components['schemas']['WriteServiceCartCount']>
      package?: components['schemas']['WriteServiceCartPackages']
      number?: number
      payments: components['schemas']['Payment']
      /** @default false */
      error: boolean
      error_msg: string | null
      visitors: Array<components['schemas']['ServiceCartVisitors']>
      /**
       * Дата начала тура
       * Format: date
       * @description Дата начала тура
       */
      start: string
      /**
       * Дата окончания тура
       * Format: date
       * @description Дата окончания тура
       */
      end: string
      /**
       * Количество человек
       * @description Количество человек
       */
      count?: number
      /**
       * Цена
       * @description Общая цена при покупке тура
       */
      price?: number
      /** @description Выбранный тур пользователя */
      tour: number
    }
    WriteServiceCartCount: {
      /** Платная услуга корзины */
      service: number
      count?: number
      price: string
    }
    WriteServiceCartCountRequest: {
      /** Платная услуга корзины */
      service: number
      count?: number
    }
    WriteServiceCartPackages: {
      /** Платная услуга корзины */
      package: number
      count?: number
      price: string
    }
    WriteServiceCartPackagesRequest: {
      /** Платная услуга корзины */
      package: number
      count?: number
    }
    WriteServiceCartRequest: {
      services?: Array<components['schemas']['WriteServiceCartCountRequest']>
      package?: components['schemas']['WriteServiceCartPackagesRequest']
      number?: number
      visitors: Array<components['schemas']['ServiceCartVisitorsRequest']>
      /**
       * Дата начала тура
       * Format: date
       * @description Дата начала тура
       */
      start: string
      /**
       * Дата окончания тура
       * Format: date
       * @description Дата окончания тура
       */
      end: string
      /**
       * Количество человек
       * @description Количество человек
       */
      count?: number
      /**
       * Цена
       * @description Общая цена при покупке тура
       */
      price?: number
      /** @description Выбранный тур пользователя */
      tour: number
    }
    WriteTourNumbers: {
      id: number
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      title?: string
      place_count: number
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour: number
      /** Удобства */
      comforts?: number[]
    }
    WriteTourNumbersRequest: {
      number_services: unknown[]
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      title?: string
      place_count: number
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Вместимость */
      capacity?: number
      /** Макс. Вместимость */
      max_capacity?: number
      /** Цена за доп. место */
      extra_capacity_price?: number
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      tour: number
      /** Удобства */
      comforts?: number[]
    }
    WriteTourPackage: {
      id: number
      order: number
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /** Format: date-time */
      deleted_at: string | null
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title: string
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour: number
      /**
       * Номер пакета
       * @description Укажите сколько местный кабинет в туре
       */
      number: number
    }
    WriteTourPackageRequest: {
      package_services: unknown[]
      /**
       * Удалён?
       * @description Отметьте, если удалён тур
       */
      is_deleted?: boolean
      /**
       * Название пакета
       * @description Примерное наименование: Комфорт, Стандарт, Номер на 1 человек
       */
      title: string
      /** Цена */
      price: number
      /** Цена выходного дня */
      holiday_price?: number | null
      /** Скрыть */
      hide?: boolean
      /** Примечание */
      remarks?: string | null
      /**
       * Тур
       * @description Указывайте для прикрепления к туру
       */
      tour: number
      /**
       * Номер пакета
       * @description Укажите сколько местный кабинет в туре
       */
      number: number
    }
  }
}

export interface operations {
  api_auth_resetPassword_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ResetPassword']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordRequest']
        'application/x-www-form-urlencoded': components['schemas']['ResetPasswordRequest']
        'multipart/form-data': components['schemas']['ResetPasswordRequest']
      }
    }
  }
  /** Return JWT tokens (access and refresh) for specific user based on username and password. */
  api_auth_token_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TokenObtainLifetime']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenObtainLifetimeRequest']
        'application/x-www-form-urlencoded': components['schemas']['TokenObtainLifetimeRequest']
        'multipart/form-data': components['schemas']['TokenObtainLifetimeRequest']
      }
    }
  }
  /**
   * Takes a token and blacklists it. Must be used with the
   * `rest_framework_simplejwt.token_blacklist` app installed.
   */
  api_auth_token_logout_create: {
    responses: {
      /** No response body */
      200: unknown
    }
  }
  /** Renew tokens (access and refresh) with new expire time based on specific user's access token. */
  api_auth_token_refresh_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CookieTokenRefresh']
        }
      }
    }
  }
  /** Верификация кода отправленный на почту или в мобильный телефон */
  api_auth_verify_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserVerify']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CodeRequest']
        'application/x-www-form-urlencoded': components['schemas']['CodeRequest']
        'multipart/form-data': components['schemas']['CodeRequest']
      }
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_list: {
    parameters: {
      query: {
        title_id?: number
      }
      path: {
        title_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['AdditionalInfoServices']>
        }
      }
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['AdditionalInfoServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalInfoServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditionalInfoServicesRequest']
        'multipart/form-data': components['schemas']['AdditionalInfoServicesRequest']
      }
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бесплатная услуга. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalInfoServices']
        }
      }
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бесплатная услуга. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalInfoServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalInfoServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditionalInfoServicesRequest']
        'multipart/form-data': components['schemas']['AdditionalInfoServicesRequest']
      }
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бесплатная услуга. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Здесь создаётся услуга к заголовкам
   * GET additionalInfoServices/ для получения всех Услуг во всех Заголовках,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?title_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись title: {id}
   * service: {string}
   */
  additionalInfo_Services_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бесплатная услуга. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalInfoServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedAdditionalInfoServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedAdditionalInfoServicesRequest']
        'multipart/form-data': components['schemas']['PatchedAdditionalInfoServicesRequest']
      }
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['AdditionalTitles']>
        }
      }
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['AdditionalTitles']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalTitlesRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditionalTitlesRequest']
        'multipart/form-data': components['schemas']['AdditionalTitlesRequest']
      }
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Готовая заголовка доп. услуги. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalTitles']
        }
      }
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Готовая заголовка доп. услуги. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalTitles']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalTitlesRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditionalTitlesRequest']
        'multipart/form-data': components['schemas']['AdditionalTitlesRequest']
      }
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Готовая заголовка доп. услуги. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Здесь есть возможность создания своих названий туров и
   * возвращаются те которые не прикреплены к конкретному турID
   */
  additionalInfo_title_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Готовая заголовка доп. услуги. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalTitles']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedAdditionalTitlesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedAdditionalTitlesRequest']
        'multipart/form-data': components['schemas']['PatchedAdditionalTitlesRequest']
      }
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['AdditonalInfoTitle']>
        }
      }
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['AdditonalInfoTitle']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditonalInfoTitleRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditonalInfoTitleRequest']
        'multipart/form-data': components['schemas']['AdditonalInfoTitleRequest']
      }
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Заголовка бесплатных услуг. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditonalInfoTitle']
        }
      }
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Заголовка бесплатных услуг. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditonalInfoTitle']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditonalInfoTitleRequest']
        'application/x-www-form-urlencoded': components['schemas']['AdditonalInfoTitleRequest']
        'multipart/form-data': components['schemas']['AdditonalInfoTitleRequest']
      }
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Заголовка бесплатных услуг. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Здесь создаётся заголовки к турам
   * GET additionalInfo/ для получения всех Заголовках во всех турах,
   * чтобы получить заголовки конкретного тура добавьте к параметрам
   * ?tour_id={id}
   * POST additionalInfo/
   * для добавления к конкретному туру заголовок внутри даты добавьте
   * запись tour: {id}
   */
  additionalInfo_tourTitle_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Заголовка бесплатных услуг. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditonalInfoTitle']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedAdditonalInfoTitleRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedAdditonalInfoTitleRequest']
        'multipart/form-data': components['schemas']['PatchedAdditonalInfoTitleRequest']
      }
    }
  }
  address_cities_list: {
    parameters: {
      query: {
        region_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['City']>
        }
      }
    }
  }
  /**
   * Поиск городов по значениям.
   * TODO: в дальнейшем будет по регионам и по странам.
   */
  address_cities_search_list: {
    parameters: {
      query: {
        name?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['SearchCity']>
        }
      }
    }
  }
  address_country_list: {
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Country']>
        }
      }
    }
  }
  address_first_page_list: {
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['FirstPageCountries']>
        }
      }
    }
  }
  address_regions_list: {
    parameters: {
      query: {
        country_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Region']>
        }
      }
    }
  }
  applications_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['PostApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['PostApplicationRequest']
        'multipart/form-data': components['schemas']['PostApplicationRequest']
      }
    }
  }
  categories_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Category']
        }
      }
    }
  }
  clients_list: {
    parameters: {
      query: {
        user_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Profile']>
        }
      }
    }
  }
  clients_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Profile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProfileRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProfileRequest']
        'multipart/form-data': components['schemas']['ProfileRequest']
      }
    }
  }
  clients_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this 2. Пользователь. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Profile']
        }
      }
    }
  }
  clients_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 2. Пользователь. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Profile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProfileRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProfileRequest']
        'multipart/form-data': components['schemas']['ProfileRequest']
      }
    }
  }
  clients_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this 2. Пользователь. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  clients_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 2. Пользователь. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Profile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedProfileRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedProfileRequest']
        'multipart/form-data': components['schemas']['PatchedProfileRequest']
      }
    }
  }
  clients_me_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Profile']
        }
      }
    }
  }
  /** Вывод всех приобретенных туров пользователя */
  clients_payHistory_list: {
    parameters: {
      query: {
        user_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['PayHistoryHistory']>
        }
      }
    }
  }
  /** Вывод всех приобретенных туров пользователя */
  clients_payHistoryDetail_retrieve: {
    parameters: {
      query: {
        payHistoryId: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PayHistoryHistoryDetail']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  comments_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['CommentTour']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  comments_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CommentTour']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentTourRequest']
        'application/x-www-form-urlencoded': components['schemas']['CommentTourRequest']
        'multipart/form-data': components['schemas']['CommentTourRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  comments_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Отзыв тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CommentTour']
        }
      }
    }
  }
  confirmationCode_create: {
    parameters: {
      path: {
        id: number
      }
    }
    responses: {
      /** No response body */
      200: unknown
    }
  }
  confirmationCode_validate_create: {
    parameters: {
      path: {
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ActivateCode']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivateCodeRequest']
        'application/x-www-form-urlencoded': components['schemas']['ActivateCodeRequest']
        'multipart/form-data': components['schemas']['ActivateCodeRequest']
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_list: {
    parameters: {
      query: {
        /** Чтобы вывести укажите промежуток дат в виде?daterange=YYYY-MM-DD,YYYY-MM-DD или MM/DD/YYYY,MM/DD/YYYY */
        daterange: string
        /** Вывести все брони тура (с сайта, с ресепшна */
        tour_id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Reservations']>
        }
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Reservations']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReservationsRequest']
        'application/x-www-form-urlencoded': components['schemas']['ReservationsRequest']
        'multipart/form-data': components['schemas']['ReservationsRequest']
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бронирование отдельного кабинета тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Reservations']
        }
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бронирование отдельного кабинета тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Reservations']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReservationsRequest']
        'application/x-www-form-urlencoded': components['schemas']['ReservationsRequest']
        'multipart/form-data': components['schemas']['ReservationsRequest']
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бронирование отдельного кабинета тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Бронирование отдельного кабинета тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Reservations']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedReservationsRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedReservationsRequest']
        'multipart/form-data': components['schemas']['PatchedReservationsRequest']
      }
    }
  }
  /** Резервирующим может быть и юрлицо и физлицо. */
  crm_check_retrieve: {
    parameters: {
      query: {
        /** Чтобы вывести укажите промежуток дат в виде?daterange=YYYY-MM-DD,YYYY-MM-DD */
        daterange: string
        /** Введите ID номера который нужно будет проверить */
        number: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReservationsCheck']
        }
      }
    }
  }
  /** Вывод всех email пользователя по user_id */
  email_list: {
    parameters: {
      query: {
        user_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['EmailAddress']>
        }
      }
    }
  }
  email_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['EmailAddress']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EmailAddressRequest']
        'application/x-www-form-urlencoded': components['schemas']['EmailAddressRequest']
        'multipart/form-data': components['schemas']['EmailAddressRequest']
      }
    }
  }
  email_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this email address. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['EmailAddress']
        }
      }
    }
  }
  email_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this email address. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['EmailAddress']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EmailAddressRequest']
        'application/x-www-form-urlencoded': components['schemas']['EmailAddressRequest']
        'multipart/form-data': components['schemas']['EmailAddressRequest']
      }
    }
  }
  email_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this email address. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  email_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this email address. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['EmailAddress']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedEmailAddressRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedEmailAddressRequest']
        'multipart/form-data': components['schemas']['PatchedEmailAddressRequest']
      }
    }
  }
  /** <b>Дни недели для указания заезда в заведение</b> */
  entry_days_retrieve: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingWeekDays']
        }
      }
    }
  }
  /** <b>Дни недели для указания заезда в заведение</b> */
  entry_days_update: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingWeekDays']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourBookingWeekDaysRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourBookingWeekDaysRequest']
        'multipart/form-data': components['schemas']['TourBookingWeekDaysRequest']
      }
    }
  }
  /** <b>Дни недели для указания заезда в заведение</b> */
  entry_days_partial_update: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingWeekDays']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourBookingWeekDaysRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourBookingWeekDaysRequest']
        'multipart/form-data': components['schemas']['PatchedTourBookingWeekDaysRequest']
      }
    }
  }
  extra_holiday_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TourBookingExtraHolidays']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourBookingExtraHolidaysRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourBookingExtraHolidaysRequest']
        'multipart/form-data': components['schemas']['TourBookingExtraHolidaysRequest']
      }
    }
  }
  extra_holiday_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Выходные дополнительные дни тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingExtraHolidays']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourBookingExtraHolidaysRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourBookingExtraHolidaysRequest']
        'multipart/form-data': components['schemas']['TourBookingExtraHolidaysRequest']
      }
    }
  }
  extra_holiday_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Выходные дополнительные дни тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  extra_holiday_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Выходные дополнительные дни тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingExtraHolidays']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourBookingExtraHolidaysRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourBookingExtraHolidaysRequest']
        'multipart/form-data': components['schemas']['PatchedTourBookingExtraHolidaysRequest']
      }
    }
  }
  guide_program_places_list: {
    parameters: {
      query: {
        program_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ProgramPlaces']>
        }
      }
    }
  }
  guide_program_places_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ProgramPlaces']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramPlacesRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProgramPlacesRequest']
        'multipart/form-data': components['schemas']['ProgramPlacesRequest']
      }
    }
  }
  guide_program_places_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Местность программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramPlaces']
        }
      }
    }
  }
  guide_program_places_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Местность программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramPlaces']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramPlacesRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProgramPlacesRequest']
        'multipart/form-data': components['schemas']['ProgramPlacesRequest']
      }
    }
  }
  guide_program_places_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Местность программы. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  guide_program_places_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Местность программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramPlaces']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedProgramPlacesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedProgramPlacesRequest']
        'multipart/form-data': components['schemas']['PatchedProgramPlacesRequest']
      }
    }
  }
  guide_program_schedules_list: {
    parameters: {
      query: {
        program_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ProgramSchedule']>
        }
      }
    }
  }
  guide_program_schedules_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ProgramSchedule']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramScheduleRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProgramScheduleRequest']
        'multipart/form-data': components['schemas']['ProgramScheduleRequest']
      }
    }
  }
  guide_program_schedules_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Расписание программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramSchedule']
        }
      }
    }
  }
  guide_program_schedules_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Расписание программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramSchedule']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramScheduleRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProgramScheduleRequest']
        'multipart/form-data': components['schemas']['ProgramScheduleRequest']
      }
    }
  }
  guide_program_schedules_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Расписание программы. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  guide_program_schedules_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Расписание программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramSchedule']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedProgramScheduleRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedProgramScheduleRequest']
        'multipart/form-data': components['schemas']['PatchedProgramScheduleRequest']
      }
    }
  }
  guide_programs_list: {
    parameters: {
      query: {
        guide_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideProgramList']>
        }
      }
    }
  }
  guide_programs_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['GuideProgram']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideProgramRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideProgramRequest']
        'multipart/form-data': components['schemas']['GuideProgramRequest']
      }
    }
  }
  guide_programs_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Программа гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideProgramDetail']
        }
      }
    }
  }
  guide_programs_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Программа гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideProgram']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideProgramRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideProgramRequest']
        'multipart/form-data': components['schemas']['GuideProgramRequest']
      }
    }
  }
  guide_programs_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Программа гида. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  guide_programs_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Программа гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideProgram']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedGuideProgramRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedGuideProgramRequest']
        'multipart/form-data': components['schemas']['PatchedGuideProgramRequest']
      }
    }
  }
  guide_reviews_list: {
    parameters: {
      query: {
        guide_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideReview']>
        }
      }
    }
  }
  guide_reviews_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['GuideReview']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideReviewRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideReviewRequest']
        'multipart/form-data': components['schemas']['GuideReviewRequest']
      }
    }
  }
  guide_reviews_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Отзыв гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideReview']
        }
      }
    }
  }
  guide_services_list: {
    parameters: {
      query: {
        guide_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideServices']>
        }
      }
    }
  }
  guide_services_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['GuideServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideServicesRequest']
        'multipart/form-data': components['schemas']['GuideServicesRequest']
      }
    }
  }
  guide_services_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Услуга гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideServices']
        }
      }
    }
  }
  guide_services_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Услуга гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideServicesRequest']
        'multipart/form-data': components['schemas']['GuideServicesRequest']
      }
    }
  }
  guide_services_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Услуга гида. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  guide_services_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Услуга гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedGuideServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedGuideServicesRequest']
        'multipart/form-data': components['schemas']['PatchedGuideServicesRequest']
      }
    }
  }
  guide_shots_list: {
    parameters: {
      query: {
        guide_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideShots']>
        }
      }
    }
  }
  guide_shots_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['GuidePOSTShots']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuidePOSTShotsRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuidePOSTShotsRequest']
        'multipart/form-data': components['schemas']['GuidePOSTShotsRequest']
      }
    }
  }
  guide_shots_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideShots']
        }
      }
    }
  }
  guide_shots_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideShots']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideShotsRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideShotsRequest']
        'multipart/form-data': components['schemas']['GuideShotsRequest']
      }
    }
  }
  guide_shots_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение гида. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  guide_shots_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение гида. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideShots']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedGuideShotsRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedGuideShotsRequest']
        'multipart/form-data': components['schemas']['PatchedGuideShotsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideList']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Guide']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideRequest']
        'multipart/form-data': components['schemas']['GuideRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Гид. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideRead']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Гид. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Guide']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GuideRequest']
        'application/x-www-form-urlencoded': components['schemas']['GuideRequest']
        'multipart/form-data': components['schemas']['GuideRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Гид. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Гид. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Guide']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedGuideRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedGuideRequest']
        'multipart/form-data': components['schemas']['PatchedGuideRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  guides_partner_retrieve: {
    parameters: {
      query: {
        org_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideRead']
        }
      }
    }
  }
  guides_slug_retrieve: {
    parameters: {
      path: {
        slug: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GuideRead']
        }
      }
    }
  }
  /**
   * <b>Ценообразование по дню недели.
   * Там, где указан день, цена будет выше</b>
   */
  holidays_retrieve: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingHoliday']
        }
      }
    }
  }
  /**
   * <b>Ценообразование по дню недели.
   * Там, где указан день, цена будет выше</b>
   */
  holidays_update: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingHoliday']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourBookingHolidayRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourBookingHolidayRequest']
        'multipart/form-data': components['schemas']['TourBookingHolidayRequest']
      }
    }
  }
  /**
   * <b>Ценообразование по дню недели.
   * Там, где указан день, цена будет выше</b>
   */
  holidays_partial_update: {
    parameters: {
      path: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourBookingHoliday']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourBookingHolidayRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourBookingHolidayRequest']
        'multipart/form-data': components['schemas']['PatchedTourBookingHolidayRequest']
      }
    }
  }
  /** Локации тура */
  location_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourLocation']>
        }
      }
    }
  }
  /** Локации тура */
  location_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TourLocation']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourLocationRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourLocationRequest']
        'multipart/form-data': components['schemas']['TourLocationRequest']
      }
    }
  }
  /** Локации тура */
  location_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Локация тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourLocation']
        }
      }
    }
  }
  /** Локации тура */
  location_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Локация тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourLocation']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourLocationRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourLocationRequest']
        'multipart/form-data': components['schemas']['TourLocationRequest']
      }
    }
  }
  /** Локации тура */
  location_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Локация тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Локации тура */
  location_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Локация тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourLocation']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourLocationRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourLocationRequest']
        'multipart/form-data': components['schemas']['PatchedTourLocationRequest']
      }
    }
  }
  /** Локации тура */
  location_tour_retrieve: {
    parameters: {
      query: {
        /** Введите id тура */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourLocation']
        }
      }
    }
  }
  manyGuidePrograms_list: {
    parameters: {
      query: {
        /** Введите id__in програм гидов */
        id__in: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideProgramList']>
        }
      }
    }
  }
  manyGuides_list: {
    parameters: {
      query: {
        /** Введите id__in гидов */
        id__in: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['GuideList']>
        }
      }
    }
  }
  manyTours_list: {
    parameters: {
      query: {
        /** Введите id__in туров */
        id__in: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourList']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_list: {
    parameters: {
      query: {
        tour_number__tour_id?: number
        tour_number_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['NumberCabinets']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['NumberCabinets']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NumberCabinetsRequest']
        'application/x-www-form-urlencoded': components['schemas']['NumberCabinetsRequest']
        'multipart/form-data': components['schemas']['NumberCabinetsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Кабинет номера тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberCabinets']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Кабинет номера тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberCabinets']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NumberCabinetsRequest']
        'application/x-www-form-urlencoded': components['schemas']['NumberCabinetsRequest']
        'multipart/form-data': components['schemas']['NumberCabinetsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Кабинет номера тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_cabinets_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Кабинет номера тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberCabinets']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedNumberCabinetsRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedNumberCabinetsRequest']
        'multipart/form-data': components['schemas']['PatchedNumberCabinetsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_list: {
    parameters: {
      query: {
        tour_number_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['NumberShots']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['NumberShotsCreate']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['NumberShotsCreateRequest']
        'application/json': components['schemas']['NumberShotsCreateRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение номера. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberShots']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение номера. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberShots']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['NumberShotsRequest']
        'application/json': components['schemas']['NumberShotsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение номера. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображение номера. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['NumberShots']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['PatchedNumberShotsRequest']
        'application/json': components['schemas']['PatchedNumberShotsRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions.
   */
  number_shots_delete_destroy: {
    parameters: {
      query: {
        /** Чтобы удалять фотки укажите в виде ?ids=1,2,3,4... */
        ids?: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_list: {
    parameters: {
      query: {
        id?: number
        /** Несколько значений могут быть разделены запятыми. */
        id__in?: number[]
        tour__slug?: string
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ListNumbers']>
        }
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['WriteTourNumbers']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WriteTourNumbersRequest']
        'application/x-www-form-urlencoded': components['schemas']['WriteTourNumbersRequest']
        'multipart/form-data': components['schemas']['WriteTourNumbersRequest']
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RetrieveNumbers']
        }
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['WriteTourNumbers']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WriteTourNumbersRequest']
        'application/x-www-form-urlencoded': components['schemas']['WriteTourNumbersRequest']
        'multipart/form-data': components['schemas']['WriteTourNumbersRequest']
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Номер тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['WriteTourNumbers']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedWriteTourNumbersRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedWriteTourNumbersRequest']
        'multipart/form-data': components['schemas']['PatchedWriteTourNumbersRequest']
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_comforts_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ListNumbers']
        }
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  numbers_free_numbers_retrieve: {
    parameters: {
      query: {
        today: string
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ListNumbers']
        }
      }
    }
  }
  org_type_list: {
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['OrgCategory']>
        }
      }
    }
  }
  org_type_retrieve: {
    parameters: {
      path: {
        slug: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['OrgCategory']
        }
      }
    }
  }
  /** Тур checkup пакеты */
  packages_list: {
    parameters: {
      query: {
        id?: number
        /** Несколько значений могут быть разделены запятыми. */
        id__in?: number[]
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ListPackage']>
        }
      }
    }
  }
  /** Тур checkup пакеты */
  packages_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['WriteTourPackage']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WriteTourPackageRequest']
        'application/x-www-form-urlencoded': components['schemas']['WriteTourPackageRequest']
        'multipart/form-data': components['schemas']['WriteTourPackageRequest']
      }
    }
  }
  /** Тур checkup пакеты */
  packages_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур пакет. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RetrievePackage']
        }
      }
    }
  }
  /** Тур checkup пакеты */
  packages_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур пакет. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['WriteTourPackage']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WriteTourPackageRequest']
        'application/x-www-form-urlencoded': components['schemas']['WriteTourPackageRequest']
        'multipart/form-data': components['schemas']['WriteTourPackageRequest']
      }
    }
  }
  /** Тур checkup пакеты */
  packages_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур пакет. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Тур checkup пакеты */
  packages_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур пакет. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['WriteTourPackage']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedWriteTourPackageRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedWriteTourPackageRequest']
        'multipart/form-data': components['schemas']['PatchedWriteTourPackageRequest']
      }
    }
  }
  /** Дополнительные платные услуги */
  paid_services_list: {
    parameters: {
      query: {
        id?: number
        /** Несколько значений могут быть разделены запятыми. */
        id__in?: number[]
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourPaidServices']>
        }
      }
    }
  }
  /** Дополнительные платные услуги */
  paid_services_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TourPaidServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPaidServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPaidServicesRequest']
        'multipart/form-data': components['schemas']['TourPaidServicesRequest']
      }
    }
  }
  /** Дополнительные платные услуги */
  paid_services_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Платная услуга тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPaidServices']
        }
      }
    }
  }
  /** Дополнительные платные услуги */
  paid_services_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Платная услуга тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPaidServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPaidServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPaidServicesRequest']
        'multipart/form-data': components['schemas']['TourPaidServicesRequest']
      }
    }
  }
  /** Дополнительные платные услуги */
  paid_services_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Платная услуга тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Дополнительные платные услуги */
  paid_services_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Платная услуга тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPaidServices']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourPaidServicesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourPaidServicesRequest']
        'multipart/form-data': components['schemas']['PatchedTourPaidServicesRequest']
      }
    }
  }
  partners_list: {
    parameters: {
      query: {
        user_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Organization']>
        }
      }
    }
  }
  partners_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Organization']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationRequest']
        'application/x-www-form-urlencoded': components['schemas']['OrganizationRequest']
        'multipart/form-data': components['schemas']['OrganizationRequest']
      }
    }
  }
  partners_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this 3. Организация. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Organization']
        }
      }
    }
  }
  partners_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 3. Организация. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Organization']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationRequest']
        'application/x-www-form-urlencoded': components['schemas']['OrganizationRequest']
        'multipart/form-data': components['schemas']['OrganizationRequest']
      }
    }
  }
  partners_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this 3. Организация. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  partners_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 3. Организация. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Organization']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedOrganizationRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedOrganizationRequest']
        'multipart/form-data': components['schemas']['PatchedOrganizationRequest']
      }
    }
  }
  partners_me_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Organization']
        }
      }
    }
  }
  payment_callbacks_kassa24_create: {
    responses: {
      /** No response body */
      200: unknown
    }
  }
  payments_list: {
    parameters: {
      query: {
        cart_id?: number
        user_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['Payment']>
        }
      }
    }
  }
  payments_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Payment']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRequest']
        'application/x-www-form-urlencoded': components['schemas']['PaymentRequest']
        'multipart/form-data': components['schemas']['PaymentRequest']
      }
    }
  }
  payments_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Оплата. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Payment']
        }
      }
    }
  }
  payments_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Оплата. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Payment']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRequest']
        'application/x-www-form-urlencoded': components['schemas']['PaymentRequest']
        'multipart/form-data': components['schemas']['PaymentRequest']
      }
    }
  }
  payments_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Оплата. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Payment']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPaymentRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPaymentRequest']
        'multipart/form-data': components['schemas']['PatchedPaymentRequest']
      }
    }
  }
  /** Вывод всех телефонных номеров пользователя по user_id */
  phone_list: {
    parameters: {
      query: {
        user_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['PhoneNumber']>
        }
      }
    }
  }
  phone_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['PhoneNumber']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PhoneNumberRequest']
        'application/x-www-form-urlencoded': components['schemas']['PhoneNumberRequest']
        'multipart/form-data': components['schemas']['PhoneNumberRequest']
      }
    }
  }
  phone_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this phone number. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PhoneNumber']
        }
      }
    }
  }
  phone_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this phone number. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PhoneNumber']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PhoneNumberRequest']
        'application/x-www-form-urlencoded': components['schemas']['PhoneNumberRequest']
        'multipart/form-data': components['schemas']['PhoneNumberRequest']
      }
    }
  }
  phone_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this phone number. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  phone_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this phone number. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PhoneNumber']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPhoneNumberRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPhoneNumberRequest']
        'multipart/form-data': components['schemas']['PatchedPhoneNumberRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourPhones']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TourPhones']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPhonesRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPhonesRequest']
        'multipart/form-data': components['schemas']['TourPhonesRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Телефонный номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPhones']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Телефонный номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPhones']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPhonesRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPhonesRequest']
        'multipart/form-data': components['schemas']['TourPhonesRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Телефонный номер тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  phones_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Телефонный номер тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPhones']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourPhonesRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourPhonesRequest']
        'multipart/form-data': components['schemas']['PatchedTourPhonesRequest']
      }
    }
  }
  program_reviews_list: {
    parameters: {
      query: {
        program_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ProgramReview']>
        }
      }
    }
  }
  program_reviews_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ProgramReview']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramReviewRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProgramReviewRequest']
        'multipart/form-data': components['schemas']['ProgramReviewRequest']
      }
    }
  }
  program_reviews_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Отзыв программы. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProgramReview']
        }
      }
    }
  }
  records_retrieve: {
    parameters: {
      query: {
        category__slug?: string
        id__in?: number[]
        is_top?: boolean
      }
      path: {
        city: string
        entity: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Content']
        }
      }
      423: {
        content: {
          'application/json': components['schemas']['Locked']
        }
      }
    }
  }
  /** Корзина тура для проведения оплаты */
  service_cart_list: {
    parameters: {
      query: {
        /** Выбранный тур пользователя */
        tour_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['ServiceCart']>
        }
      }
    }
  }
  /** Корзина тура для проведения оплаты */
  service_cart_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['WriteServiceCart']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WriteServiceCartRequest']
        'application/x-www-form-urlencoded': components['schemas']['WriteServiceCartRequest']
        'multipart/form-data': components['schemas']['WriteServiceCartRequest']
      }
    }
  }
  /** Корзина тура для проведения оплаты */
  service_cart_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Корзина тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ServiceCart']
        }
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourShots']>
        }
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateTourShots']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateTourShotsRequest']
        'application/json': components['schemas']['CreateTourShotsRequest']
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображения тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourShots']
        }
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображения тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourShots']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['TourShotsRequest']
        'application/json': components['schemas']['TourShotsRequest']
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображения тура. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Эндпоинт для изображения туров */
  shots_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Изображения тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourShots']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['PatchedTourShotsRequest']
        'application/json': components['schemas']['PatchedTourShotsRequest']
      }
    }
  }
  /** Эндпоинт для изображения туров */
  shots_delete_destroy: {
    parameters: {
      query: {
        /** Чтобы удалять фотки укажите в виде ?ids=1,2,3,4... */
        ids?: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  tour_apps_apps_list: {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number
        tour_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedListTourApplicationList']
        }
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  tour_apps_apps_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Заявка индивидуального тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RetrieveTourApplication']
        }
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  tour_apps_apps_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Заявка индивидуального тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UpdateTourApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTourApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['UpdateTourApplicationRequest']
        'multipart/form-data': components['schemas']['UpdateTourApplicationRequest']
      }
    }
  }
  /**
   * Overrides get_serializer_class to choose the read serializer
   * for GET requests and the write serializer for POST requests.
   *
   * Set read_serializer_class and write_serializer_class attributes on a
   * viewset.
   */
  tour_apps_apps_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Заявка индивидуального тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UpdateTourApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedUpdateTourApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedUpdateTourApplicationRequest']
        'multipart/form-data': components['schemas']['PatchedUpdateTourApplicationRequest']
      }
    }
  }
  tour_apps_comments_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CommentTourApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentTourApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['CommentTourApplicationRequest']
        'multipart/form-data': components['schemas']['CommentTourApplicationRequest']
      }
    }
  }
  tour_apps_comments_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Примечание индивидуальной заявки к туру. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CommentTourApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentTourApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['CommentTourApplicationRequest']
        'multipart/form-data': components['schemas']['CommentTourApplicationRequest']
      }
    }
  }
  tour_apps_comments_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this Примечание индивидуальной заявки к туру. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  tour_apps_comments_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Примечание индивидуальной заявки к туру. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CommentTourApplication']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedCommentTourApplicationRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedCommentTourApplicationRequest']
        'multipart/form-data': components['schemas']['PatchedCommentTourApplicationRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_list: {
    parameters: {
      query: {
        tour_id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourPriceFile']>
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TourPriceFile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPriceFileRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPriceFileRequest']
        'multipart/form-data': components['schemas']['TourPriceFileRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this tour price file. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPriceFile']
        }
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this tour price file. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPriceFile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TourPriceFileRequest']
        'application/x-www-form-urlencoded': components['schemas']['TourPriceFileRequest']
        'multipart/form-data': components['schemas']['TourPriceFileRequest']
      }
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this tour price file. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * A viewset that provides default `create()`, `retrieve()`, `update()`,
   * `partial_update()`, `destroy()` and `list()` actions with *`tour_id`* parameter.
   */
  tourPrice_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this tour price file. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourPriceFile']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTourPriceFileRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTourPriceFileRequest']
        'multipart/form-data': components['schemas']['PatchedTourPriceFileRequest']
      }
    }
  }
  /** Retrieve a list of instances of the model */
  tourSubscribe_list: {
    parameters: {
      query: {
        tour_id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourSubscribe']>
        }
      }
    }
  }
  tourSubscribe_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateSubscribe']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSubscribeRequest']
        'application/x-www-form-urlencoded': components['schemas']['CreateSubscribeRequest']
        'multipart/form-data': components['schemas']['CreateSubscribeRequest']
      }
    }
  }
  tourSubscribe_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this Подписка тура. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourSubscribe']
        }
      }
    }
  }
  tourSubscribe_subscribe_prices_list: {
    parameters: {
      query: {
        tour_id?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['SubscribePrices']>
        }
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_list: {
    parameters: {
      query: {
        category__slug?: string
        category_id?: number
        country_id?: number | null
        org__user_id?: number
        /** Прикрепленная организация к туру */
        org_id?: number | null
        region_id?: number | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Array<components['schemas']['TourList']>
        }
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Tour']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['TourRequest']
        'application/json': components['schemas']['TourRequest']
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourRead']
        }
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Tour']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['TourRequest']
        'application/json': components['schemas']['TourRequest']
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур. */
        id: number
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this * Тур. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Tour']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['PatchedTourRequest']
        'application/json': components['schemas']['PatchedTourRequest']
      }
    }
  }
  /** Для подробного просмотра своих туров. Если тур не прошёл модерацию, то только будет видно только самому пользователю */
  tours_me_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourRead']
        }
      }
    }
  }
  /**
   * API endpoint для туров.
   *
   * retrieve: tours/{id}/
   * Возвращает конкретный тур
   *
   * list:
   * Возвращает все туры которые имеют поле is_moderated=true
   *
   * me:
   * Возвращает список всех туров пользователя
   *
   *
   * CurrencyEnum:  0: "USD",
   *                 1: "KZT",
   *                 2: "UZS",
   *                 3: "KGS",
   *                 4: "EUR",
   */
  tours_medicalProfiles_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourRead']
        }
      }
    }
  }
  tours_slug_retrieve: {
    parameters: {
      path: {
        slug: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TourRead']
        }
      }
    }
  }
  users_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this 1. Основной аккаунт для аутентификации. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  users_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 1. Основной аккаунт для аутентификации. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRequest']
        'application/x-www-form-urlencoded': components['schemas']['UserRequest']
        'multipart/form-data': components['schemas']['UserRequest']
      }
    }
  }
  users_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this 1. Основной аккаунт для аутентификации. */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedUserRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedUserRequest']
        'multipart/form-data': components['schemas']['PatchedUserRequest']
      }
    }
  }
  users_logout_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Logout']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LogoutRequest']
        'application/x-www-form-urlencoded': components['schemas']['LogoutRequest']
        'multipart/form-data': components['schemas']['LogoutRequest']
      }
    }
  }
  /** Не используйте /me для просмотра подробностей */
  users_me_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserRead']
        }
      }
    }
  }
  users_password_change_update: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PasswordChange']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordChangeRequest']
        'application/x-www-form-urlencoded': components['schemas']['PasswordChangeRequest']
        'multipart/form-data': components['schemas']['PasswordChangeRequest']
      }
    }
  }
  users_password_change_partial_update: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PasswordChange']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPasswordChangeRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPasswordChangeRequest']
        'multipart/form-data': components['schemas']['PatchedPasswordChangeRequest']
      }
    }
  }
  users_passwordReset_change_update: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PasswordResetChange']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordResetChangeRequest']
        'application/x-www-form-urlencoded': components['schemas']['PasswordResetChangeRequest']
        'multipart/form-data': components['schemas']['PasswordResetChangeRequest']
      }
    }
  }
  users_passwordReset_change_partial_update: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PasswordResetChange']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPasswordResetChangeRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPasswordResetChangeRequest']
        'multipart/form-data': components['schemas']['PatchedPasswordResetChangeRequest']
      }
    }
  }
  /** Верификация кода для восстановления пароля */
  users_passwordReset_verify_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserVerify']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CodeRequest']
        'application/x-www-form-urlencoded': components['schemas']['CodeRequest']
        'multipart/form-data': components['schemas']['CodeRequest']
      }
    }
  }
  /** Регистрация простого смертного пользователя */
  users_register_client_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ResponseRegister']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterUserRequest']
        'application/x-www-form-urlencoded': components['schemas']['RegisterUserRequest']
        'multipart/form-data': components['schemas']['RegisterUserRequest']
      }
    }
  }
  users_register_part_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PartUserCreate']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PartUserCreateRequest']
        'application/x-www-form-urlencoded': components['schemas']['PartUserCreateRequest']
        'multipart/form-data': components['schemas']['PartUserCreateRequest']
      }
    }
  }
  /**
   * Регистрация организации, требуется отправить либо телефонный номер либо эмейл
   *
   * Обязательно указать юзернейм для платежной системы
   */
  users_register_partner_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ResponseRegister']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterOrgRequest']
        'application/x-www-form-urlencoded': components['schemas']['RegisterOrgRequest']
        'multipart/form-data': components['schemas']['RegisterOrgRequest']
      }
    }
  }
}
